<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>猫大叔</title>
  
  <subtitle>关注前端，热爱生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://21ido.com/"/>
  <updated>2018-05-23T02:54:39.712Z</updated>
  <id>https://21ido.com/</id>
  
  <author>
    <name>猫大叔</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TypeScript学习笔记(2)</title>
    <link href="https://21ido.com/2018/05/383e290e/"/>
    <id>https://21ido.com/2018/05/383e290e/</id>
    <published>2018-05-16T08:29:33.000Z</published>
    <updated>2018-05-23T02:54:39.712Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="表示法"><a href="#表示法" class="headerlink" title="[]表示法"></a>[]表示法</h4><p>在类型定义后面加上[]即表示数组<br>定义的数组不允许出现其它类型，同时支持联合类型<br></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> catArr: <span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> catName: <span class="built_in">string</span>[] = [<span class="string">"one"</span>,<span class="string">"tow"</span>,<span class="string">"three"</span>];</span><br><span class="line"><span class="keyword">let</span> catColor: (<span class="built_in">string</span>|<span class="built_in">number</span>)[] = [<span class="number">1</span>,<span class="string">"tow"</span>,<span class="number">0xFFF</span>];</span><br><span class="line">catColor.push(<span class="string">"four"</span>);</span><br></pre></td></tr></table></figure><p></p><h4 id="泛型表示法"><a href="#泛型表示法" class="headerlink" title="泛型表示法"></a>泛型表示法</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> catArr: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> catName: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">"one"</span>,<span class="string">"tow"</span>,<span class="string">"three"</span>];</span><br><span class="line"><span class="keyword">let</span> catColor: <span class="built_in">Array</span>&lt;<span class="built_in">boolean</span>|<span class="built_in">number</span>&gt; = [<span class="number">0</span>,<span class="number">1</span>, <span class="literal">true</span>];</span><br><span class="line">catColor.push(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="接口描述法"><a href="#接口描述法" class="headerlink" title="接口描述法"></a>接口描述法</h4><p>前面的interface可以描述和约束对象，所以也可以描述一个数组<br></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> TestArray &#123;</span><br><span class="line">    [proName: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> t: TestArray = [<span class="string">"a"</span>,<span class="string">"b"</span>];</span><br><span class="line">t[<span class="number">2</span>]=<span class="string">"c"</span>;</span><br></pre></td></tr></table></figure><p></p><p>但是当<strong> t.push(“d”) </strong>会发现，报错了</p><blockquote><p>error TS2339: Property ‘push’ does not exist on type ‘TestArray’</p></blockquote><p>因为定义的只是值类型，没有push这个方法</p><h4 id="any数组"><a href="#any数组" class="headerlink" title="any数组"></a>any数组</h4><p>如果向往数组塞任意类型数据，就使用any类型<br></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> catCategory: <span class="built_in">any</span>[] = [<span class="string">"white"</span>, <span class="number">0xfff</span>, <span class="string">"small"</span>, <span class="number">2000</span>];<span class="keyword">let</span> catCategory: <span class="built_in">any</span>[] = [<span class="string">"white"</span>, <span class="number">0xfff</span>, <span class="string">"small"</span>, <span class="number">2000</span>];</span><br><span class="line">catCategory.push(&#123;<span class="string">"name"</span>:<span class="string">"gavin"</span>&#125;);</span><br><span class="line">catCategory.push(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h3&gt;&lt;h4 id=&quot;表示法&quot;&gt;&lt;a href=&quot;#表示法&quot; class=&quot;headerlink&quot; title=&quot;[]表示法&quot;&gt;&lt;/a&gt;[]表示法&lt;/h4&gt;&lt;p&gt;在类型定义后面加上[]即表示数组&lt;br&gt;定义的数组不允许出现其它类型，同时支持联合类型&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; catArr: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;[] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; catName: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;[] = [&lt;span class=&quot;string&quot;&gt;&quot;one&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;tow&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;three&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; catColor: (&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;|&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;)[] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;tow&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0xFFF&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;catColor.push(&lt;span class=&quot;string&quot;&gt;&quot;four&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;h4 id=&quot;泛型表示法&quot;&gt;&lt;a href=&quot;#泛型表示法&quot; class=&quot;headerlink&quot; title=&quot;泛型表示法&quot;&gt;&lt;/a&gt;泛型表示法&lt;/h4&gt;&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; catArr: &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;&amp;gt; = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; catName: &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt; = [&lt;span class=&quot;string&quot;&gt;&quot;one&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;tow&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;three&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; catColor: &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;boolean&lt;/span&gt;|&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;&amp;gt; = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;catColor.push(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Web" scheme="https://21ido.com/categories/Web/"/>
    
    
      <category term="javascript" scheme="https://21ido.com/tags/javascript/"/>
    
      <category term="typescript" scheme="https://21ido.com/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript学习笔记(1)</title>
    <link href="https://21ido.com/2018/05/1f5ada0a/"/>
    <id>https://21ido.com/2018/05/1f5ada0a/</id>
    <published>2018-05-14T03:44:00.000Z</published>
    <updated>2018-05-22T09:08:59.349Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/xcatliu/typescript-tutorial" target="_blank" rel="noopener">《TypeScript入门教程》</a></p><h2 id="TypeScript是什么"><a href="#TypeScript是什么" class="headerlink" title="TypeScript是什么"></a>TypeScript是什么</h2><p>是JavaScript的超集<br>安装nodejs后执行<br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g typescript</span><br></pre></td></tr></table></figure><p></p><p>TypeScript是后缀名为ts的文本文件，编译ts命令为<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc hello.ts</span><br></pre></td></tr></table></figure><p></p><p>然后就会生成对应js文件</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="原始数据类型"><a href="#原始数据类型" class="headerlink" title="原始数据类型"></a>原始数据类型</h3><ul><li>布尔值<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isCat: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li><p>数值</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> catNum: <span class="built_in">number</span> = <span class="number">9</span>;</span><br></pre></td></tr></table></figure></li><li><p>字符串</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> catName: <span class="built_in">string</span> = <span class="string">"Gavin"</span>;</span><br></pre></td></tr></table></figure></li><li><p>null 和 undefined<br>这2个类型比较特殊，值只能是null和undefined</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure></li></ul><p>但是其它类型的值可以是null或undefined<br></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> catAge: <span class="built_in">number</span> = <span class="number">10</span>;</span><br><span class="line">catAge = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><p></p><ul><li><p>void<br>JS是没有Void，但TS可以有，表示没有返回值</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>): <span class="title">void</span></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>any任意型<br>JS没有严格的类型规定，实际使用中可以随意转换类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myCat = <span class="string">"hello"</span>;</span><br><span class="line">myCat = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li></ul><p>这样在JS中并不会报错，因为JS会隐性类型转换，但TS严格定义了类型，使用过程是不允许改变类型的<br>所以有了任意值类型<br></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myCat: <span class="built_in">any</span> = <span class="string">"hello"</span>;</span><br><span class="line">myCat = <span class="number">10</span>;</span><br><span class="line">myCat.name = <span class="string">"Gavin"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(myCat);</span><br></pre></td></tr></table></figure><p></p><h3 id="类型推论"><a href="#类型推论" class="headerlink" title="类型推论"></a>类型推论</h3><p>如果定义是没有指明类型，则自动根据值判断类型<br></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> catAge = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="keyword">let</span> catAge: <span class="built_in">number</span> = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p></p><p>如果没有赋值，则是any类型</p><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><p>赋予变量多种类型，同时取值可以为多种类型中一种<br>比如在JS函数里头，往往希望传入参数是数值，但偏偏传进一个带引号的数值’10’，于是变成字符串<br>在TS中则可以这么定义<br></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myCat: <span class="built_in">string</span> | <span class="built_in">number</span> = <span class="number">20</span>;</span><br><span class="line">myCat = <span class="string">'10'</span>;</span><br></pre></td></tr></table></figure><p></p><p>甚至可以指定3个类型，这还要看具体需要<br></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myCat: <span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">boolean</span> = <span class="string">"hello"</span>;</span><br><span class="line">myCat = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p></p><h2 id="接口interface"><a href="#接口interface" class="headerlink" title="接口interface"></a>接口interface</h2><p>接口是用来描述和约束一个对象的东西，说起来比较抽象<br></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Cat&#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    color: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> blackCat: Cat = &#123;</span><br><span class="line">    name: <span class="string">"Gavin"</span>;</span><br><span class="line">    color: <span class="string">"black"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>接口规定了2个属性和属性类型，如果增加第三个属性，比如<br></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> blackCat: Cat = &#123;</span><br><span class="line">    name: <span class="string">"Gavin"</span>;</span><br><span class="line">    color: <span class="string">"black"</span>;</span><br><span class="line">    age: <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 报错，因为age不在接口定义里面</span></span><br></pre></td></tr></table></figure><p></p><p>可以定义可选属性<br></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Cat&#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    color: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>可以定义只读属性<br>这里的只读属性是指给属性赋值后只读，不可再次修改<br></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Cat&#123;</span><br><span class="line">    readonly id: <span class="built_in">number</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    color: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myCat: Cat = &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    name: <span class="string">"Gavin"</span>,</span><br><span class="line">    color: <span class="string">"Black"</span></span><br><span class="line">&#125;</span><br><span class="line">myCat.id = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//(12,7): error TS2540: Cannot assign to 'id' because it is a constant or a read-only property.</span></span><br><span class="line"><span class="comment">//报错了，只读属性不可再次赋值</span></span><br></pre></td></tr></table></figure><p></p><p>还可以定义任意类型任意名称的属性<br></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Cat&#123;</span><br><span class="line">    readonly id: <span class="built_in">number</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    color: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">    [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/xcatliu/typescript-tutorial&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《TypeScript入门教程》&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&quot;TypeScript是什么&quot;&gt;&lt;a href=&quot;#TypeScript是什么&quot; class=&quot;headerlink&quot; title=&quot;TypeScript是什么&quot;&gt;&lt;/a&gt;TypeScript是什么&lt;/h2&gt;&lt;p&gt;是JavaScript的超集&lt;br&gt;安装nodejs后执行&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm i -g typescript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;TypeScript是后缀名为ts的文本文件，编译ts命令为&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tsc hello.ts&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;然后就会生成对应js文件&lt;/p&gt;&lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;h3 id=&quot;原始数据类型&quot;&gt;&lt;a href=&quot;#原始数据类型&quot; class=&quot;headerlink&quot; title=&quot;原始数据类型&quot;&gt;&lt;/a&gt;原始数据类型&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;布尔值&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; isCat: &lt;span class=&quot;built_in&quot;&gt;boolean&lt;/span&gt; = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="Web" scheme="https://21ido.com/categories/Web/"/>
    
    
      <category term="javascript" scheme="https://21ido.com/tags/javascript/"/>
    
      <category term="typescript" scheme="https://21ido.com/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket入门（3）心跳检测</title>
    <link href="https://21ido.com/2018/05/30381c3b/"/>
    <id>https://21ido.com/2018/05/30381c3b/</id>
    <published>2018-05-11T02:41:26.000Z</published>
    <updated>2018-05-14T07:30:33.445Z</updated>
    
    <content type="html"><![CDATA[<p>websocket自带onerror回调，当异常会触发，但是在目前阶段，某些时候浏览器并不会触发，包括chrome，直接close<br>最好就是加一个心跳检测来判断网络异常<br>websocket有一个readyState状态值，代表的状态如下（摘自<a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html" target="_blank" rel="noopener">阮一峰博客</a>）</p><ul><li>CONNECTING：值为0，表示正在连接</li><li>OPEN：值为1，表示连接成功，可以通信了</li><li>CLOSING：值为2，表示连接正在关闭</li><li>CLOSED：值为3，表示连接已经关闭，或者打开连接失败</li></ul><p>当成功建立连接后，即启动心跳检测，大概的流程如下图<br><img src="/images/2018/05/websocket_heart.png" alt="flow"><br><a id="more"></a><br>画完图觉得很简单，就花了十分钟敲完代码<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> heartCheck = &#123;</span><br><span class="line">  timer: <span class="number">0</span>,</span><br><span class="line">  _obj : <span class="literal">null</span>,</span><br><span class="line">  _callback:<span class="literal">null</span>,</span><br><span class="line">  init: <span class="function"><span class="keyword">function</span>(<span class="params">wsObj, callback</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"init"</span>);</span><br><span class="line"><span class="keyword">this</span>._obj = wsObj;</span><br><span class="line">callback &amp;&amp; (<span class="keyword">this</span>._callback = callback);</span><br><span class="line"><span class="keyword">this</span>.sayHi();</span><br><span class="line">  &#125;,</span><br><span class="line">  sayHi: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">clearTimeout(<span class="keyword">this</span>.timer);</span><br><span class="line"><span class="keyword">this</span>.timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.onError();</span><br><span class="line">&#125;, <span class="number">10000</span>);</span><br><span class="line"><span class="keyword">this</span>._obj.send(<span class="string">"hi,"</span> + <span class="keyword">this</span>.timer);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"sayHi:"</span> + <span class="keyword">this</span>.timer);</span><br><span class="line">  &#125;,</span><br><span class="line">  clear: <span class="function"><span class="keyword">function</span>(<span class="params">flag</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"clear:"</span> + <span class="keyword">this</span>.timer);</span><br><span class="line">clearTimeout(<span class="keyword">this</span>.timer);</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span> === flag)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"heartCheck finished"</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.sayHi();</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  onError: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"onError:"</span>,<span class="keyword">this</span>.timer);</span><br><span class="line">clearTimeout(<span class="keyword">this</span>.timer);</span><br><span class="line"><span class="keyword">this</span>._callback &amp;&amp; <span class="keyword">this</span>._callback();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//let hc = new heartCheck();</span></span><br><span class="line"><span class="keyword">let</span> uri = <span class="string">"ws://localhost:8080"</span>;</span><br><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(uri);</span><br><span class="line">ws.onopen = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ws onopen'</span>, event);</span><br><span class="line">  ws.send(<span class="string">'from client: hello'</span>);</span><br><span class="line">  heartCheck.init(ws);</span><br><span class="line">&#125;;</span><br><span class="line">ws.onmessage = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ws onmessage'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'from server: '</span>, event);</span><br><span class="line">  showLog(event.data);</span><br><span class="line">  heartCheck.clear();</span><br><span class="line">&#125;;</span><br><span class="line">ws.onclose = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"ws close"</span>, event);</span><br><span class="line">  <span class="built_in">console</span>.log(ws);</span><br><span class="line">  heartCheck.clear(<span class="literal">true</span>);</span><br><span class="line">&#125;;</span><br><span class="line">ws.onerror = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"ws error"</span>, event);</span><br><span class="line">  <span class="built_in">console</span>.log(ws);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>调试一下发现一些问题<br>1）每次发心跳都是重复2次<br>2）心跳结束后还在发心跳<br>3）未考虑多个事物连续发信息的优化</p><p><img src="/images/2018/05/websocket_console.png" alt=""></p><p>重新理下思路，首先模拟一个正常的Socket通讯</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> uri = <span class="string">"ws://localhost:8080"</span>;</span><br><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(uri);</span><br><span class="line">ws.onopen = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ws onopen'</span>, event);</span><br><span class="line">  MsgBegin &amp;&amp; MsgBegin();</span><br><span class="line">&#125;;</span><br><span class="line">ws.onmessage = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ws onmessage'</span>, event);</span><br><span class="line">  showLog(event.data);</span><br><span class="line">&#125;;</span><br><span class="line">ws.onclose = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"ws close"</span>, event, ws);</span><br><span class="line">&#125;;</span><br><span class="line">ws.onerror = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"ws error"</span>, event, ws);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> MsgBegin = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> n = <span class="built_in">Math</span>.random() * <span class="number">100000</span>;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">ws.send(<span class="string">"send:"</span> + n);</span><br><span class="line">MsgBegin();</span><br><span class="line">  &#125;,n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WebSocket建立成功后，随机发送消息，服务端收到后返回（服务端实际设置了延迟1秒返回）<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">websocket server is listening...</span><br><span class="line">server: receive connection.</span><br><span class="line">server: received: send:17534.353070269426</span><br><span class="line">server: received: send:80161.1894501739</span><br><span class="line">server: received: send:84509.49454040357</span><br><span class="line">server: received: send:29288.908671059355</span><br><span class="line">server: received: send:8404.852392415196</span><br><span class="line">server: received: send:45471.163768915</span><br><span class="line">server: received: send:16825.41444159582</span><br></pre></td></tr></table></figure><p></p><p>加入心跳检测，设为间隔10秒<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> heartCheck = &#123;</span><br><span class="line">  timer: <span class="number">0</span>,</span><br><span class="line">  _obj : <span class="literal">null</span>,</span><br><span class="line">  _callback:<span class="literal">null</span>,</span><br><span class="line">  _time: <span class="number">10000</span>, <span class="comment">//心跳间隔10秒</span></span><br><span class="line">  init: <span class="function"><span class="keyword">function</span>(<span class="params">wsObj, callback</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"init"</span>);</span><br><span class="line"><span class="keyword">this</span>._obj = wsObj;</span><br><span class="line">callback &amp;&amp; (<span class="keyword">this</span>._callback = callback);</span><br><span class="line"><span class="keyword">this</span>.sayHi();</span><br><span class="line">  &#125;,</span><br><span class="line">  sayHi: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">clearTimeout(<span class="keyword">this</span>.timer);</span><br><span class="line"><span class="keyword">this</span>.timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="number">1</span> == <span class="keyword">this</span>._obj.readyState)&#123;</span><br><span class="line"><span class="keyword">this</span>._obj.send(<span class="string">"check : "</span> + <span class="keyword">this</span>.timer);            </span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="keyword">this</span>._time);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"sayHi:"</span> + <span class="keyword">this</span>.timer);</span><br><span class="line">  &#125;,</span><br><span class="line">  clear: <span class="function"><span class="keyword">function</span>(<span class="params">flag</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"clear:"</span> + <span class="keyword">this</span>.timer);</span><br><span class="line">clearTimeout(<span class="keyword">this</span>.timer);</span><br><span class="line">  &#125;,</span><br><span class="line">  onError: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"onError:"</span>,<span class="keyword">this</span>.timer);</span><br><span class="line"><span class="keyword">this</span>.clear();</span><br><span class="line"><span class="keyword">this</span>._callback &amp;&amp; <span class="keyword">this</span>._callback();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> uri = <span class="string">"ws://localhost:8080"</span>;</span><br><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(uri);</span><br><span class="line">ws.onopen = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ws onopen'</span>, event);</span><br><span class="line">  showLog(<span class="string">"go~"</span>);</span><br><span class="line">  MsgBegin &amp;&amp; MsgBegin();</span><br><span class="line">  heartCheck.init(ws, ()=&gt;&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"reconnect..."</span>);</span><br><span class="line">ws = <span class="keyword">new</span> WebSocket(uri);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">ws.onmessage = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ws onmessage1'</span>, event,ws.readyState);</span><br><span class="line">  showLog(event.data);</span><br><span class="line">  heartCheck.sayHi();</span><br><span class="line">&#125;;</span><br><span class="line">ws.onclose = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"ws close"</span>, event, ws);</span><br><span class="line">  heartCheck.clear();</span><br><span class="line">&#125;;</span><br><span class="line">ws.onerror = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"ws error"</span>, event, ws);</span><br><span class="line">  heartCheck.onError();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> MsgBegin = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> n = <span class="built_in">Math</span>.random() * <span class="number">100000</span>;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span> == ws.readyState)&#123;</span><br><span class="line">  ws.send(<span class="string">"send:"</span> + n);</span><br><span class="line">&#125;</span><br><span class="line">MsgBegin();</span><br><span class="line">  &#125;,n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>再来看服务端打印<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">websocket server is listening...</span><br><span class="line">server: receive connection.</span><br><span class="line">server: received: send:4723.126142686907</span><br><span class="line">server: received: check : 4</span><br><span class="line">server: received: check : 5</span><br><span class="line">server: received: send:29661.621846562404</span><br><span class="line">server: received: check : 8</span><br><span class="line">server: received: check : 9</span><br><span class="line">server: received: check : 10</span><br><span class="line">server: received: check : 11</span><br><span class="line">server: received: check : 12</span><br><span class="line">server: received: check : 13</span><br><span class="line">server: received: check : 14</span><br><span class="line">server: received: check : 15</span><br><span class="line">server: received: send:97094.08453462382</span><br><span class="line">server: received: check : 16</span><br><span class="line">server: received: send:26387.016092298032</span><br></pre></td></tr></table></figure><p></p><p>好像可以了哦，本例代码在 <a href="https://github.com/think2cat/practice/tree/master/WebSocket" target="_blank" rel="noopener">Github</a><br>有空闲了再写个断线重连的</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;websocket自带onerror回调，当异常会触发，但是在目前阶段，某些时候浏览器并不会触发，包括chrome，直接close&lt;br&gt;最好就是加一个心跳检测来判断网络异常&lt;br&gt;websocket有一个readyState状态值，代表的状态如下（摘自&lt;a href=&quot;http://www.ruanyifeng.com/blog/2017/05/websocket.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阮一峰博客&lt;/a&gt;）&lt;/p&gt;&lt;ul&gt;&lt;li&gt;CONNECTING：值为0，表示正在连接&lt;/li&gt;&lt;li&gt;OPEN：值为1，表示连接成功，可以通信了&lt;/li&gt;&lt;li&gt;CLOSING：值为2，表示连接正在关闭&lt;/li&gt;&lt;li&gt;CLOSED：值为3，表示连接已经关闭，或者打开连接失败&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;当成功建立连接后，即启动心跳检测，大概的流程如下图&lt;br&gt;&lt;img src=&quot;/images/2018/05/websocket_heart.png&quot; alt=&quot;flow&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="https://21ido.com/categories/Web/"/>
    
    
      <category term="http" scheme="https://21ido.com/tags/http/"/>
    
      <category term="socket" scheme="https://21ido.com/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket入门（2）API使用</title>
    <link href="https://21ido.com/2018/03/8e1b4ab/"/>
    <id>https://21ido.com/2018/03/8e1b4ab/</id>
    <published>2018-03-30T09:19:47.000Z</published>
    <updated>2018-05-14T07:30:26.979Z</updated>
    
    <content type="html"><![CDATA[<p>Websocket有2种URI格式，ws:// 和 wss://，端口分别为80和443，类似 http:// 和 https://</p><p>看个demo</p><p>↓↓↓ 客户端 ↓↓↓</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>WebSocket<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"</span> <span class="attr">name</span>=<span class="string">"viewport"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> showLog = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> dom = <span class="built_in">document</span>.getElementById(<span class="string">"container"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> tmp = dom.innerHTML;</span></span><br><span class="line"><span class="javascript">tmp = str + <span class="string">"&lt;br /&gt;"</span> + tmp;</span></span><br><span class="line"><span class="undefined">dom.innerHTML = tmp;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">'ws://localhost:8080'</span>);</span></span><br><span class="line"><span class="javascript">ws.onopen = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'ws onopen'</span>, event);</span></span><br><span class="line"><span class="javascript">ws.send(<span class="string">'from client: hello'</span>);</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="javascript">ws.onmessage = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'ws onmessage'</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'from server: '</span>, event);</span></span><br><span class="line"><span class="undefined">showLog(event.data);</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="javascript">ws.onclose = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">"close"</span>, event);</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="javascript">ws.onerror = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">"error"</span>, event);</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>↓↓↓ 服务端 ↓↓<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'express'</span>)();</span><br><span class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">'http'</span>).Server(app);</span><br><span class="line"><span class="keyword">var</span> WebSocket = <span class="built_in">require</span>(<span class="string">'ws'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wss = <span class="keyword">new</span> WebSocket.Server(&#123;<span class="attr">port</span>: <span class="number">8080</span>&#125;);</span><br><span class="line"></span><br><span class="line">wss.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> <span class="title">connection</span>(<span class="params">ws</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'server: receive connection.'</span>);</span><br><span class="line"></span><br><span class="line">ws.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> <span class="title">incoming</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'server: received: %s'</span>, message);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">ws.send(<span class="string">'world: '</span> + <span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">&#125;, <span class="number">5000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">res.sendfile(__dirname + <span class="string">'/index.html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p></p><p>如果不启动服务端，打开客户端后就能看到error错误信息，因为握手失败了</p><p><img src="/images/2018/03/websocket2_1.png" alt=""></p><p>启动服务端再来看下http请求<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET ws://localhost:8080/ HTTP/1.1</span><br><span class="line">Host: localhost:8080</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Origin: file://</span><br><span class="line">Sec-WebSocket-Version: 13</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3355.4 Safari/537.36</span><br><span class="line">DNT: 1</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: en,zh-CN;q=0.9,zh;q=0.8,en-US;q=0.7,pt-PT;q=0.6,pt;q=0.5,ko;q=0.4</span><br><span class="line">Cookie: JSESSIONID=f0ce5da6-557e-447f-b0a8-3563d771c6f3</span><br><span class="line">Sec-WebSocket-Key: n9l56FSbQi57pkACi36qfg==</span><br><span class="line">Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits</span><br></pre></td></tr></table></figure><p></p><p>因为websocket前期握手还是基于http协议，所以头也差不多，其中connection和upgrade为固定参数，用于通知服务端这是websocket请求，其中的key为生成的随机标识，而extensions为扩展字段非必须<br>服务端收到请求后返回101状态响应</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 101 Switching Protocols</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Accept: 1qW7tCNMaZ33U1DCQPFVbUgudmg=</span><br></pre></td></tr></table></figure><p>握手成功后，虽然端口可以不变，但是协议已经从http://切换到 ws://（或者https:// 切换到 wss://），可以相互使用websocket api发送文本或二进制数据</p><p>此时刷新下浏览器看下打印，可以看到依次触发的事件，onopen &gt; onmessage &gt; onclose</p><p><img src="/images/2018/03/websocket2_2.png" alt=""></p><p>这是最基本的socket通讯，双方都可以用send来发送数据，特别要说的是最后的onclose，触发这个事件是因为手动把server关了，正常情况下会下发断开的通知，如果是网络问题或是服务器宕机等异常，是不会有通知，此时需要客户端发送心跳来检测连接是否断开</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Websocket有2种URI格式，ws:// 和 wss://，端口分别为80和443，类似 http:// 和 https://&lt;/p&gt;&lt;p&gt;看个demo&lt;/p&gt;&lt;p&gt;↓↓↓ 客户端 ↓↓↓&lt;/p&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;WebSocket&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;viewport&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; showLog = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;str&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; dom = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;container&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; tmp = dom.innerHTML;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;	tmp = str + &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;br /&amp;gt;&quot;&lt;/span&gt; + tmp;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;	dom.innerHTML = tmp;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ws = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; WebSocket(&lt;span class=&quot;string&quot;&gt;&#39;ws://localhost:8080&#39;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;ws.onopen = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;ws onopen&#39;&lt;/span&gt;, event);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;	ws.send(&lt;span class=&quot;string&quot;&gt;&#39;from client: hello&#39;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;ws.onmessage = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;ws onmessage&#39;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;from server: &#39;&lt;/span&gt;, event);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;	showLog(event.data);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;ws.onclose = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;close&quot;&lt;/span&gt;, event);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;ws.onerror = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;error&quot;&lt;/span&gt;, event);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Web" scheme="https://21ido.com/categories/Web/"/>
    
    
      <category term="http" scheme="https://21ido.com/tags/http/"/>
    
      <category term="socket" scheme="https://21ido.com/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket入门（1）TCP基础</title>
    <link href="https://21ido.com/2018/02/83090531/"/>
    <id>https://21ido.com/2018/02/83090531/</id>
    <published>2018-02-26T10:18:15.000Z</published>
    <updated>2018-05-14T07:30:18.309Z</updated>
    
    <content type="html"><![CDATA[<p>WebSocket是html5的产物，跟socket相似，但是前期通讯是基于http，而http又是基于TCP<br>先说下TCP的三次握手</p><p><img src="/images/2018/02/tcp3.png" alt=""></p><p>翻译成人话就是这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">客户端：老哥你在吗</span><br><span class="line">服务端：老弟找我啥事</span><br><span class="line">服务端：太好了是这样的</span><br><span class="line">然后传输开始巴拉巴拉巴拉</span><br></pre></td></tr></table></figure><a id="more"></a><p>TCP握手建立连接后，就开始基于HTTP协议传输数据，在http 1.0的时候，每个请求都需要一个连接，请求完成连接就断开，然后重新握手<br>到了http 1.1则支持一次连接多个请求，像这样<br>。。。握手之后<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">客户端：吧啦吧啦吧啦吧啦</span><br><span class="line">服务端：吧拉收到</span><br><span class="line">客户端：吧唧吧唧吧唧吧唧</span><br><span class="line">客户端：吧嗒吧嗒吧嗒吧嗒</span><br><span class="line">服务端：吧唧收到</span><br><span class="line">服务端：吧嗒收到</span><br></pre></td></tr></table></figure><p></p><p>请求不一定是依次发送的，可以是重叠，而且每个请求并无需等服务端返回，而且几次请求期间，连接是一直存在的，即使中间不是连续的，客户端也会定时发“keep-alive”的指令让服务端保持连接，而服务端可以通过配置http服务器来设置超时时间，如Apache、Tomcat之类<br>断开连接则需要4次握手，多出的一次是因为服务端要通知客户端请求完成<br>如下图</p><p><img src="/images/2018/02/tcp4.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">客户端：老哥我要断开连接啦</span><br><span class="line">服务端：收到断开（然后查一下有没未返回的请求）</span><br><span class="line">服务端：所有请求都完成了</span><br><span class="line">客户端：断断断切克闹</span><br></pre></td></tr></table></figure><p>Socket是基于传输层和应用层之间的一个抽象层，说白就是对TCP/IP协议的封装，是一个API接口，而不是协议</p><p>Socket也叫套接字，建立Socket需要一对套接字，分别位于客户端和服务端</p><p>首先服务端打开监听服务，客户端对服务器提出请求，服务端确认请求，此时连接就建立起来了</p><p>Socket一般采用TCP协议，也可以指定UDP协议，而HTTP是基于TCP协议应用层协议，在传输层之上的</p><p><img src="/images/2018/02/socket.png" alt=""></p><p>题外话，<a href="https://www.zhihu.com/question/21383903" target="_blank" rel="noopener">Socket为什么要翻译成套接字？</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WebSocket是html5的产物，跟socket相似，但是前期通讯是基于http，而http又是基于TCP&lt;br&gt;先说下TCP的三次握手&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/images/2018/02/tcp3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;翻译成人话就是这样&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;客户端：老哥你在吗&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;服务端：老弟找我啥事&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;服务端：太好了是这样的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;然后传输开始巴拉巴拉巴拉&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="IT" scheme="https://21ido.com/categories/IT/"/>
    
    
      <category term="http" scheme="https://21ido.com/tags/http/"/>
    
      <category term="socket" scheme="https://21ido.com/tags/socket/"/>
    
      <category term="tcp" scheme="https://21ido.com/tags/tcp/"/>
    
  </entry>
  
  <entry>
    <title>javascript事件委托</title>
    <link href="https://21ido.com/2018/01/c1495b93/"/>
    <id>https://21ido.com/2018/01/c1495b93/</id>
    <published>2018-01-17T09:43:52.000Z</published>
    <updated>2018-05-13T14:14:18.145Z</updated>
    
    <content type="html"><![CDATA[<p>本例代码在<a href="https://github.com/think2cat/practice/tree/master/delegate" target="_blank" rel="noopener">Github</a></p><p>事件委托简单来说，就是触发事件的DOM元素本身不执行绑定的事件，而是交给父元素或上上级甚至根元素去处理</p><p>先看个例子<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>AA <span class="tag">&lt;<span class="name">span</span>&gt;</span>A1<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>A2<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>BB <span class="tag">&lt;<span class="name">span</span>&gt;</span>B1<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>B2<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>CC <span class="tag">&lt;<span class="name">span</span>&gt;</span>C1<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>C2<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>DD <span class="tag">&lt;<span class="name">span</span>&gt;</span>D1<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>D2<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>EE <span class="tag">&lt;<span class="name">span</span>&gt;</span>E1<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>E2<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>FF <span class="tag">&lt;<span class="name">span</span>&gt;</span>F1<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>F2<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><a id="more"></a><p>假设这个列表的LI和SPAN均需要加上click事件，常规做法是在每个DOM都绑定事件，比如<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> liArr = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"li"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; liArr.length; i++)&#123; </span><br><span class="line"> liArr[i].addEventListener(<span class="string">"click"</span>,(evt)=&gt;&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"click li"</span>);</span><br><span class="line"> &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> spanArr = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"span"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; spanArr.length; i++)&#123; </span><br><span class="line"> spanArr[i].addEventListener(<span class="string">"click"</span>,(evt)=&gt;&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"click span"</span>);</span><br><span class="line"> evt.stopPropagation();</span><br><span class="line"> &#125;);</span><br><span class="line">&#125;<span class="keyword">let</span> liArr = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"li"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; liArr.length; i++)&#123;                </span><br><span class="line">liArr[i].addEventListener(<span class="string">"click"</span>,(evt)=&gt;&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"click li"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> spanArr = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"span"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; spanArr.length; i++)&#123;                </span><br><span class="line">spanArr[i].addEventListener(<span class="string">"click"</span>,(evt)=&gt;&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"click span"</span>);</span><br><span class="line">evt.stopPropagation();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这种做法，简单页面还挺适用，遇到DOM元素多的，或者需要有删除增加需求的，就需要不断执行绑定操作，这样一来是会消耗很多内存，二来是容易出错</p><p>这时就需要事件委托，把事件绑定在父级元素</p><p>浏览器的事件冒泡看这里，</p><p>因为LI和SPAN都在DIV里面，所以只需绑定DIV即可<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>)[<span class="number">0</span>].addEventListener(<span class="string">"click"</span>,(evt)=&gt;&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(evt);</span><br><span class="line"> <span class="keyword">if</span>(<span class="string">"span"</span> == evt.target.nodeName.toLocaleLowerCase())&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"is a span"</span>, evt.target.innerText);</span><br><span class="line"> &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"li"</span> == evt.target.nodeName.toLocaleLowerCase())&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"is a li"</span>, evt.target.innerText);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><p>在参数即event事件可以找到是哪个DOM触发了事件</p><p>看起来跟一般事件一样，多了一个触发元素的判断</p><p>为此jQuery从1.4.2新增了delegate函数，但到了1.7版本就换成 on函数，用法是一样的</p><p>$.on() 和 $.click() 最大的区别是执行语句之后，新增加的DOM元素，只要符合选择器，也会绑定on函数指定的事件，而click则不会</p><p>on的语法，$.on( events [, selector ] [, data ], handler )</p><p>选择器用于选择后代元素，所以事件的触发来自于后代元素，而非绑定on的元素</p><p>对于本例来说，改成jquery.on也没啥变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"div"</span>).on(<span class="string">"click"</span>, <span class="string">"li, span"</span>, (evt) =&gt; &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"span"</span>, evt);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"span"</span> == evt.target.nodeName.toLocaleLowerCase()) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"is a span"</span>, evt.target.innerText);</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"li"</span> == evt.target.nodeName.toLocaleLowerCase()) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"is a li"</span>, evt.target.innerText);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本例代码在&lt;a href=&quot;https://github.com/think2cat/practice/tree/master/delegate&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;&lt;p&gt;事件委托简单来说，就是触发事件的DOM元素本身不执行绑定的事件，而是交给父元素或上上级甚至根元素去处理&lt;/p&gt;&lt;p&gt;先看个例子&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;AA &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;A1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;A2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;BB &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;B1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;B2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;CC &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;C1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;C2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;DD &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;D1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;D2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;EE &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;E1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;E2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;FF &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;F1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;F2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="https://21ido.com/categories/Web/"/>
    
    
      <category term="javascript" scheme="https://21ido.com/tags/javascript/"/>
    
      <category term="delegate" scheme="https://21ido.com/tags/delegate/"/>
    
  </entry>
  
  <entry>
    <title>jsPlumb学习笔记（2）</title>
    <link href="https://21ido.com/2018/01/c1587beb/"/>
    <id>https://21ido.com/2018/01/c1587beb/</id>
    <published>2018-01-10T09:11:38.000Z</published>
    <updated>2018-05-14T07:32:05.671Z</updated>
    
    <content type="html"><![CDATA[<p>完成元素拖动后，接着做连线，连线由几部分组成</p><ol><li>Endpoint 端点，默认为圆点</li><li>Connector 连接线，默认为贝塞尔曲线</li><li>Anchor 锚点，不可见元素，跟Endpoint是绑定的，在动态创建连接线时使用</li><li>Overlay 覆盖物，如连线上的箭头，也可以是文字或dom元素</li></ol><p>当容器append了一个dom后，调用addEndpoint来增加输出和输入端点，该函数接受3个参数，分别是dom，参数以及附加参数<br><a id="more"></a><br>共用的参数可以写进附加参数，然后参数里相同的属性会进行覆盖 参数详细介绍在这里 <a href="https://jsplumbtoolkit.com/community/apidocs/classes/jsPlumb.html#method_addEndpoint" target="_blank" rel="noopener">addEndpoint</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jsPlumb.addEndpoint(newDom, &#123; <span class="attr">isTarget</span>: <span class="literal">true</span>, <span class="attr">anchor</span>: <span class="string">"Left"</span> &#125;); </span><br><span class="line">jsPlumb.addEndpoint(newDom, &#123; <span class="attr">isSource</span>: <span class="literal">true</span>, <span class="attr">anchor</span>: <span class="string">"Right"</span> &#125;);</span><br></pre></td></tr></table></figure><p>增加输出和输入端点后，即可进行连线</p><p><img src="/images/2018/01/js6.gif" alt=""></p><p>连线操作OK，有点丑，加个样式看看</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> connectorStyle = &#123;</span><br><span class="line"><span class="comment">//端点样式</span></span><br><span class="line">paintStyle: &#123;</span><br><span class="line">fill: <span class="string">"#7AB02C"</span>,</span><br><span class="line">radius: <span class="number">7</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//连线类型</span></span><br><span class="line">connector: [<span class="string">"Flowchart"</span>, &#123;</span><br><span class="line">stub: [<span class="number">40</span>, <span class="number">60</span>],</span><br><span class="line">gap: <span class="number">10</span>,</span><br><span class="line">cornerRadius: <span class="number">5</span>,</span><br><span class="line">alwaysRespectStubs: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">//连线样式</span></span><br><span class="line">connectorStyle: &#123;</span><br><span class="line">strokeWidth: <span class="number">3</span>,</span><br><span class="line">stroke: <span class="string">"#9C9DA9"</span>,</span><br><span class="line">joinstyle: <span class="string">"round"</span>,</span><br><span class="line">outlineStroke: <span class="string">"none"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//鼠标移上样式</span></span><br><span class="line">hoverPaintStyle: &#123;</span><br><span class="line">fill: <span class="string">"#216477"</span>,</span><br><span class="line">stroke: <span class="string">"#216477"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">jsPlumb.addEndpoint(newDom, &#123;</span><br><span class="line">isTarget: <span class="literal">true</span>,</span><br><span class="line">anchor: <span class="string">"Left"</span></span><br><span class="line">&#125;, connectorStyle);</span><br><span class="line">jsPlumb.addEndpoint(newDom, &#123;</span><br><span class="line">isSource: <span class="literal">true</span>,</span><br><span class="line">anchor: <span class="string">"Right"</span>,</span><br><span class="line">paintStyle: &#123;</span><br><span class="line">stroke: <span class="string">"#7AB02C"</span>,</span><br><span class="line">fill: <span class="string">"transparent"</span>,</span><br><span class="line">radius: <span class="number">7</span>,</span><br><span class="line">strokeWidth: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;, connectorStyle);</span><br></pre></td></tr></table></figure><p>为了区分输出和输入端点，把输出点改为空心样式</p><p><img src="/images/2018/01/js7.gif" alt=""></p><p>看着感觉有点怪，少了箭头，接着添加覆盖物overlay</p><p>overlay有几种类型</p><ul><li>Arrow 箭头</li><li>Plain Arrow 平底箭头，相当于[“Arrow”, { foldback: 1}]</li><li>Diamond 钻石，相当于[“Arrow”, { foldback: 2}]</li><li>Label 就是文本</li><li><p>Custom 自定义，支持HTML</p><p><img src="/images/2018/01/js8.png" alt=""></p></li></ul><p>上文[“Arrow”, { foldback:1}]中的foldback是调整粗细的，常用属性还有location，用于调整XY位置</p><ul><li>当0≤ x,y ≥ 1时表示距离source的百分比，0.5就是中间</li><li>当 &gt; 1时表示距离source的像素，10就是距离source 10个像素的位置</li><li>当 &lt; 0时表示距离target的像素，-5就是距离target 5个像素<br>Label属性用在label标签上， [ “Label”, { label:”cat”, id:”label”, location:[-0.5, -0.5] } ]</li></ul><p>加入overlay有几种途径</p><ol><li>设置全局默认属性<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jsPlumb.importDefaults(&#123;</span><br><span class="line">ConnectionOverlays: [</span><br><span class="line">[<span class="string">"Arrow"</span>, &#123;<span class="attr">location</span>: <span class="number">1</span>&#125;]</span><br><span class="line">]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>创建端点时，附加属性来控制，比如前面的connectorStyle<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> connectorStyle = &#123;</span><br><span class="line"> connectorOverlays: [</span><br><span class="line"> [<span class="string">"Arrow"</span>, &#123;<span class="attr">location</span>: <span class="number">1</span>, <span class="attr">id</span>: <span class="string">"arrow"</span>&#125;],</span><br><span class="line"> [<span class="string">"Label"</span>, &#123;</span><br><span class="line"> label: <span class="string">"21ido.com"</span>,</span><br><span class="line"> location: <span class="number">0.5</span></span><br><span class="line"> &#125;</span><br><span class="line"> ]</span><br><span class="line"> ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><p>overlay是可以多个，这样在连线是除了箭头，还多了文字</p><p><img src="/images/2018/01/js9.png" alt=""></p><ol start="3"><li><p>connect方法动态创建</p><p>在调用jsPlumb.addEndpoint时，将返回endpoint对象，假设连线是通过JS创建，而不是鼠标拖动完成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">jsPlumb.connect(&#123;</span><br><span class="line"> source: pointSource,</span><br><span class="line"> target: pointTarget,</span><br><span class="line"> overlays: [[<span class="string">"Custom"</span>, &#123;</span><br><span class="line"> create: <span class="function"><span class="keyword">function</span> (<span class="params">component</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> $(<span class="string">"&lt;img src='http://bpic.588ku.com/element_origin_min_pic/00/93/91/4056f2b13a70c32.jpg' /&gt;"</span>);</span><br><span class="line"> &#125;,</span><br><span class="line"> id: <span class="string">"smile"</span></span><br><span class="line"> &#125;</span><br><span class="line"> ]]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>动态创建连线，overlay是自定义html元素，一个笑脸图片</p><p>除了连线overlay，端点也可以增加overlay，比如在源端点增加一个文字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">jsPlumb.addEndpoint(newDom, &#123;</span><br><span class="line"> isSource: <span class="literal">true</span>,</span><br><span class="line"> anchor: <span class="string">"Right"</span>,</span><br><span class="line"> paintStyle: &#123;</span><br><span class="line"> stroke: <span class="string">"#7AB02C"</span>,</span><br><span class="line"> fill: <span class="string">"transparent"</span>,</span><br><span class="line"> radius: <span class="number">7</span>,</span><br><span class="line"> strokeWidth: <span class="number">2</span></span><br><span class="line"> &#125;,</span><br><span class="line"> overlays: [</span><br><span class="line"> [<span class="string">"Label"</span>, &#123;</span><br><span class="line"> label: <span class="string">"source"</span>,</span><br><span class="line"> id: <span class="string">"label"</span>,</span><br><span class="line"> location: [<span class="number">3</span>, <span class="number">0.5</span>],</span><br><span class="line"> cssClass: <span class="string">"endpointLabel"</span></span><br><span class="line"> &#125;</span><br><span class="line"> ]</span><br><span class="line"> ]</span><br><span class="line">&#125;, connectorStyle);</span><br></pre></td></tr></table></figure><p>效果如下图<br><img src="/images/2018/01/js10.png" alt=""></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;完成元素拖动后，接着做连线，连线由几部分组成&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Endpoint 端点，默认为圆点&lt;/li&gt;&lt;li&gt;Connector 连接线，默认为贝塞尔曲线&lt;/li&gt;&lt;li&gt;Anchor 锚点，不可见元素，跟Endpoint是绑定的，在动态创建连接线时使用&lt;/li&gt;&lt;li&gt;Overlay 覆盖物，如连线上的箭头，也可以是文字或dom元素&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;当容器append了一个dom后，调用addEndpoint来增加输出和输入端点，该函数接受3个参数，分别是dom，参数以及附加参数&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="https://21ido.com/categories/Web/"/>
    
    
      <category term="javascript" scheme="https://21ido.com/tags/javascript/"/>
    
      <category term="jsPlumb" scheme="https://21ido.com/tags/jsPlumb/"/>
    
  </entry>
  
  <entry>
    <title>jsPlumb学习笔记（1）</title>
    <link href="https://21ido.com/2018/01/d3edd405/"/>
    <id>https://21ido.com/2018/01/d3edd405/</id>
    <published>2018-01-02T09:13:29.000Z</published>
    <updated>2018-05-14T07:32:09.667Z</updated>
    
    <content type="html"><![CDATA[<p>jsPlumb是一个DOM连线JS库，采用SVG绘制连线</p><p><a href="https://jsplumbtoolkit.com/" target="_blank" rel="noopener">官网</a> | <a href="https://github.com/jsplumb/jsplumb" target="_blank" rel="noopener">GitHub</a> | <a href="https://jsplumbtoolkit.com/docs.html" target="_blank" rel="noopener">API</a></p><p>这是前阵子做的DEMO，用来操作沙盘演示用，做得比较粗糙</p><p>本文代码均放<a href="https://github.com/think2cat/jsplumb_demo" target="_blank" rel="noopener">GitHub</a>，另外学习中参考了网上其他大牛，特别感谢这二位</p><p><a href="http://www.cnblogs.com/techborther/archive/2012/04/17/2454101.html" target="_blank" rel="noopener">【看完想不会都难的系列教程】- (3) JQuery+JQueryUI+Jsplumb 实现拖拽模块，流程图风格</a></p><p><a href="http://qkxue.net/info/182575/jsPlumb" target="_blank" rel="noopener">jsPlumb的简单使用</a></p><p><img src="/images/2018/01/js2.gif" alt=""><br><a id="more"></a><br>下面一步步来玩弄这玩意</p><p>首先是页面代码结构，一个source表示原始元素，container表示编辑区画布</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"source"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>Red<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>Blue<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/2018/01/js1.gif" alt=""></p><p>首先要完成拖动，用到jQuery UI的droppable<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".source"</span>).find(<span class="string">"li"</span>).draggable(&#123;</span><br><span class="line">    helper: <span class="string">"clone"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><p>左侧元素可以拖动了，相当于在DOM元素加了属性 draggable=”true”<br>这里draggable加了clone参数表明元素是克隆一个，而不是拖动原始DOM<br>接着需要设置接受拖动元素的容器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".container"</span>).droppable(&#123;</span><br><span class="line">drop: <span class="function">(<span class="params">event, ui</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> sourceDom = ui.draggable.first();</span><br><span class="line"><span class="keyword">let</span> newDom = $(<span class="string">"&lt;div style='border-color:"</span> + sourceDom.text() + <span class="string">"'&gt;"</span> + sourceDom.text() + <span class="string">"&lt;/div&gt;"</span>);</span><br><span class="line">$(<span class="string">".container"</span>).append(newDom);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>为接收容器设置了拖放事件，当元素放到容器时触发drop事件，传入event事件和dom，本例只拖动一个元素所以source只有一个元素，取得原始DOM后进行组装成新DOM，再插入到容器</p><p><img src="/images/2018/01/js3.gif" alt=""></p><p>完成之后会发现一个问题，就是拖到容器后的元素，没法再拖动了，因为我们给左边source设置了拖动，但是容器里的元素是新生成的，并没有设置拖动属性，所以在容器新增DOM后还需要加入拖动</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">newDom.offset(&#123;</span><br><span class="line"><span class="string">"left"</span>: ui.offset.left,</span><br><span class="line"><span class="string">"top"</span>: ui.offset.top</span><br><span class="line">&#125;).draggable(&#123;</span><br><span class="line">containment: $(<span class="string">".container"</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这句作用是拖动到容器后，设置新增DOM的XY坐标，并限制拖动范围，刷新看下效果</p><p><img src="/images/2018/01/js4.gif" alt=""></p><p>凌乱了是吧，因为容器的drop事件设置的是有元素拖进来则clone，而没有判断拖动的元素是否是容器内部，只需加入父元素判断即可<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (sourceDom.parent()[<span class="number">0</span>] == <span class="built_in">document</span>.getElementsByClassName(<span class="string">"container"</span>)[<span class="number">0</span>]) &#123;</span><br><span class="line">    <span class="comment">//如果拖动的是容器里面的，则重绘</span></span><br><span class="line">    jsPlumb.repaintEverything();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>最终拖动效果如下</p><p><img src="/images/2018/01/js5.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jsPlumb是一个DOM连线JS库，采用SVG绘制连线&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://jsplumbtoolkit.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt; | &lt;a href=&quot;https://github.com/jsplumb/jsplumb&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt; | &lt;a href=&quot;https://jsplumbtoolkit.com/docs.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;API&lt;/a&gt;&lt;/p&gt;&lt;p&gt;这是前阵子做的DEMO，用来操作沙盘演示用，做得比较粗糙&lt;/p&gt;&lt;p&gt;本文代码均放&lt;a href=&quot;https://github.com/think2cat/jsplumb_demo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;，另外学习中参考了网上其他大牛，特别感谢这二位&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/techborther/archive/2012/04/17/2454101.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;【看完想不会都难的系列教程】- (3) JQuery+JQueryUI+Jsplumb 实现拖拽模块，流程图风格&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://qkxue.net/info/182575/jsPlumb&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jsPlumb的简单使用&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/images/2018/01/js2.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="https://21ido.com/categories/Web/"/>
    
    
      <category term="javascript" scheme="https://21ido.com/tags/javascript/"/>
    
      <category term="jsPlumb" scheme="https://21ido.com/tags/jsPlumb/"/>
    
  </entry>
  
  <entry>
    <title>UEFI启动那些事</title>
    <link href="https://21ido.com/2017/12/7a24af62/"/>
    <id>https://21ido.com/2017/12/7a24af62/</id>
    <published>2017-12-11T09:35:58.000Z</published>
    <updated>2018-05-22T07:46:04.985Z</updated>
    
    <content type="html"><![CDATA[<p>UEFI早在大概05年就推出1.1版了，但是一直没有推广开，直到win7开始支持<br>我作为一个守旧派不大愿意接受新硬件，也一直坚守Legacy BIOS启动方式（下面简称BIOS）</p><p>但是最近换了新电脑，自带WIn10，格掉后重新分区，Ghost了一版Win10后发现无法启动，主板设置居然连硬盘启动都消失了，折腾半天无果，才不得已看了恶补了一下知识<br>关于BIOS启动和UEFI启动可以看这篇豆芽文<br><a href="https://wiki.archlinux.org/index.php/Unified_Extensible_Firmware_Interface" target="_blank" rel="noopener">Unified Extensible Firmware Interface</a></p><p>简单来说，BIOS启动后从硬盘MBR引导扇区（Master Boot Record）加载引导信息，而UEFI是从\ESP分区加载引导信息，这又涉及到MBR分区表和GPT分区表<br><a id="more"></a><br>MBR和GPT分区表在使用和性能上是没有差别的，只是由于MBR规定是硬盘扇区前面512字节，长度的限制，所以只能支持2.2T硬盘和最多4个分区，而GPT则没有这方面限制，理论上支持无限分区<br>在分区软件DiskGenius可以看到2种分区表类型，GUID则是GPT（GPT是缩写，全称是GUID Partition Table (GPT)）</p><p><img src="/images/2017/12/DiskGenius-1.png" alt="DiskGenius"><br>（图片来自网络）</p><p>选择GPT分区表下方可以看到ESP和MSR分区</p><blockquote><p>ESP = EFI system partition<br>MSR = Microsoft Reserved Partition</p></blockquote><p>其中ESP就是上面提到的引导区，如果硬盘不是系统启动盘，即使用GPT分区表，ESP分区也是 可以不要的，再者MSR分区是为了避免硬盘插到老系统提示硬盘未分区而做的兼容，如果不需要兼容老系统也是可以不要的</p><p>接着来说我遇到的主板设置找不到硬盘引导的问题，就是分区时用了MBR形式，而主板并不兼容这种老引导，解决就是重新用EFI分区表，然后重装系统，重装时会自动在ESP分区写入引导文件，如果跟我一样是GHOST的，那GHOST完后，还要手动往ESP分区写入引导文件，win10是自带了修复工具，命令行下敲bcdboot可以看到，如果有的话直接敲<br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bcdboot C:\Windows /s I: /f UEFI /l zh-cn</span><br></pre></td></tr></table></figure><p></p><p>但是我启动的PE居然没有这个命令，好在自带了一个小工具</p><p><img src="/images/2017/12/uefi修复.png" alt=""></p><p>709KB 非常小巧，修复完重启，终于可以看到win10的启动画面了，内牛满面！</p><p>另外晒下新买的本本</p><p><img src="/images/2017/12/DiskGenius.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UEFI早在大概05年就推出1.1版了，但是一直没有推广开，直到win7开始支持&lt;br&gt;我作为一个守旧派不大愿意接受新硬件，也一直坚守Legacy BIOS启动方式（下面简称BIOS）&lt;/p&gt;&lt;p&gt;但是最近换了新电脑，自带WIn10，格掉后重新分区，Ghost了一版Win10后发现无法启动，主板设置居然连硬盘启动都消失了，折腾半天无果，才不得已看了恶补了一下知识&lt;br&gt;关于BIOS启动和UEFI启动可以看这篇豆芽文&lt;br&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/Unified_Extensible_Firmware_Interface&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unified Extensible Firmware Interface&lt;/a&gt;&lt;/p&gt;&lt;p&gt;简单来说，BIOS启动后从硬盘MBR引导扇区（Master Boot Record）加载引导信息，而UEFI是从\ESP分区加载引导信息，这又涉及到MBR分区表和GPT分区表&lt;br&gt;
    
    </summary>
    
      <category term="IT" scheme="https://21ido.com/categories/IT/"/>
    
    
      <category term="BIOS" scheme="https://21ido.com/tags/BIOS/"/>
    
      <category term="ESP" scheme="https://21ido.com/tags/ESP/"/>
    
      <category term="MSR" scheme="https://21ido.com/tags/MSR/"/>
    
      <category term="UEFI" scheme="https://21ido.com/tags/UEFI/"/>
    
      <category term="WIN10" scheme="https://21ido.com/tags/WIN10/"/>
    
  </entry>
  
  <entry>
    <title>ShadowSocks PAC过滤规则说明</title>
    <link href="https://21ido.com/2017/12/7868958c/"/>
    <id>https://21ido.com/2017/12/7868958c/</id>
    <published>2017-12-07T06:48:48.000Z</published>
    <updated>2018-05-14T02:32:19.544Z</updated>
    
    <content type="html"><![CDATA[<p>SS小飞机文件夹有个pac.txt，打开会发现是一个JS格式的文件，这就是自动代理配置文件<br>PAC全称Proxy Auto Config File，用于根据URL选择不同代理服务器或是不代理直接访问，相比于传统代理可以加快速度，也减少代理服务器的流量</p><p><img src="/images/2017/12/pac.png" alt=""><br><a id="more"></a><br>PAC最早是Ad Block使用的一种规则，用于屏蔽网页各种广告，所以参数除了URL外还支持各种DOM元素，详细参数看这里 <a href="https://adblockplus.org/en/filter-cheatsheet" target="_blank" rel="noopener">https://adblockplus.org/en/filter-cheatsheet</a><br>SS小飞机只用了URI部分的规则，完整文件在根目录下pac.txt，如果需要增加规则，则修改user-rule.txt，然后SS就会自动跟GFW合并生成pac.txt<br>user-rule.txt格式每行一个规则，! 开头表示注释</p><ol><li>支持通配符，比如 *.21ido.com，但这句其实用 .21ido.com 即可</li><li>|| 协议通杀， ||.21ido.com 匹配 <a href="ftp://21ido.com，http://21ido.com，https://21ido.com" target="_blank" rel="noopener">ftp://21ido.com，http://21ido.com，https://21ido.com</a></li><li>@@ 例外，比如上面的||匹配了所有21ido.com，如果其中blog.21ido.com不希望被匹配，则加一行 @@blog.21ido.com</li><li>| 开头或结束，上面的例外规则，如果遇到 blog.21ido.com.cn其实还是会被例外放行，如果不希望.com外的域名也被匹配到，改为 @@blog.21ido.com|，同理也可以放在开头如@@|blog.21ido.com|</li><li>^ 标记分隔符，跟结束符 | 相似，但^表示非字母数字及_ - . %外的字符，比如 21ido.com^ 除了匹配 21ido.com/ 外，还可以匹配 21ido.com:8080/ 或是 21ido.com?t=2017</li><li>正则，斜杠/开头并斜杠/结束，比如/^https?:\/\/[^\/]+blogspot\.(.*)/</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SS小飞机文件夹有个pac.txt，打开会发现是一个JS格式的文件，这就是自动代理配置文件&lt;br&gt;PAC全称Proxy Auto Config File，用于根据URL选择不同代理服务器或是不代理直接访问，相比于传统代理可以加快速度，也减少代理服务器的流量&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/images/2017/12/pac.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="https://21ido.com/categories/Web/"/>
    
    
      <category term="PAC" scheme="https://21ido.com/tags/PAC/"/>
    
      <category term="ShadowSocks" scheme="https://21ido.com/tags/ShadowSocks/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli下解决跨域sessionid问题</title>
    <link href="https://21ido.com/2017/09/33570702/"/>
    <id>https://21ido.com/2017/09/33570702/</id>
    <published>2017-09-12T15:31:00.000Z</published>
    <updated>2018-05-13T11:54:28.791Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2017/09/sessionid.png" alt=""></p><p>项目开始为了方便直接把页面包在Java容器里面，而实际设计应该是前后端分离的<br>最近在做分离时api请求发现，因为前端web和后端portal不在一个容器，存在跨域，会造成每次ajax请求都生成不同sessionid，而portal是通过session来识别用户，从而控制权限，这将导致登录后依旧无法获取数据，因为sessionid变了，portal认为没有权限并302重定向到首页<br><a id="more"></a><br>网上有不同解决办法，比如通过java去获取sessionid，并在每次请求时通过http带过去<br>因为之前做过几年的Facebook、Twitter等这类app，他们用的都是token，应该是相当成熟的解决办法，但是后端的哥们不想动代码，因为涉及到整个认证框架的修改，然后就只能从前端来解决</p><p>前端用的vue.js，配合vue-cli搭起来的webpack环境，其实只要修改下配置就可以了<br>打开 ./config/index.js，找到 proxyTable，改为<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line"><span class="string">'/api/'</span>: &#123;</span><br><span class="line">target: <span class="string">"http://10.242.129.164:8080/"</span>,</span><br><span class="line">changeOrigin: <span class="literal">true</span>,</span><br><span class="line">pathRewrite: &#123;</span><br><span class="line"><span class="string">'^/api'</span>: <span class="string">'/'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p></p><p>然后ajax请求 <a href="http://localhost:8080/api/xxxxx" target="_blank" rel="noopener">http://localhost:8080/api/xxxxx</a> 就可以了，node会匹配url然后通过代理去请求远程api</p><p><strong>2018-1-10 更新</strong></p><p>今天同事用这个方法调试发现依然不能保存session，登录后session跟着变，看了一下请求</p><p><img src="/images/2017/09/cookie_session.fw_.png" alt=""></p><p>重点就是红框，因为请求的是 /api/xxx</p><p>即使反向代理设置了 /api/ 的重写，但是作为浏览器并不会知道后端的套路，于是路径不必配自然不会 set-cookie，于是下次请求又是新的session</p><p>解决办法一是改后台，二是把反向代理设置成后端一样 /manage/</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/2017/09/sessionid.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;项目开始为了方便直接把页面包在Java容器里面，而实际设计应该是前后端分离的&lt;br&gt;最近在做分离时api请求发现，因为前端web和后端portal不在一个容器，存在跨域，会造成每次ajax请求都生成不同sessionid，而portal是通过session来识别用户，从而控制权限，这将导致登录后依旧无法获取数据，因为sessionid变了，portal认为没有权限并302重定向到首页&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="https://21ido.com/categories/Web/"/>
    
    
      <category term="javascript" scheme="https://21ido.com/tags/javascript/"/>
    
      <category term="node.js" scheme="https://21ido.com/tags/node-js/"/>
    
      <category term="vue" scheme="https://21ido.com/tags/vue/"/>
    
      <category term="vue-cli" scheme="https://21ido.com/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>Bower学习笔记</title>
    <link href="https://21ido.com/2017/08/cf44a887/"/>
    <id>https://21ido.com/2017/08/cf44a887/</id>
    <published>2017-08-21T07:17:19.000Z</published>
    <updated>2018-05-22T07:45:55.289Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2017/08/bower.png" alt="bower"></p><h4 id="1-bower是什么"><a href="#1-bower是什么" class="headerlink" title="1. bower是什么"></a>1. bower是什么</h4><p>bower是基于node.js的包管理工具，可以方便的安装和卸载web开发资源，诸如jQuery、bootstrap之类<br>而像yeoman和grunt则是在bower基础上的开发工具</p><h4 id="2-bower和npm的区别"><a href="#2-bower和npm的区别" class="headerlink" title="2. bower和npm的区别"></a>2. bower和npm的区别</h4><p>都是包管理工具，但是bower是for web，npm的包依赖是一种独特的嵌套依赖关系树，依赖包层层嵌套树杈非常坑长，打开node_modules可以看到里面密密麻麻的包，但对于前端库来说，这些基本是多余的，往往需要的只是一个未压缩或者压缩后的js和css而已，而bower正是管理js/css/模板的一个工具<br><a href="https://stackoverflow.com/questions/18641899/what-is-the-difference-between-bower-and-npm" target="_blank" rel="noopener">Stack上有相关评论点这里</a><br><a id="more"></a></p><h4 id="3-如何安装"><a href="#3-如何安装" class="headerlink" title="3. 如何安装"></a>3. 如何安装</h4><p>安装完node.js后输入<br>npm install -g bower<br>安装完后输入 bower -v 如果能打印版本号说明安装成功</p><h4 id="4-如何使用"><a href="#4-如何使用" class="headerlink" title="4.  如何使用"></a>4. 如何使用</h4><ul><li><p>初始化bower.json</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower init</span><br></pre></td></tr></table></figure></li><li><p>安装bower本身支持的包，支持列表见 <a href="https://bower.io/search/" target="_blank" rel="noopener">https://bower.io/search/</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower install jQuery --save-dev</span><br></pre></td></tr></table></figure></li><li><p>安装github上的包，则可用短连接形式安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower install jQuery/jQuery</span><br></pre></td></tr></table></figure></li><li><p>安装其它网上资源，则直接跟上URL</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower install https://github.com/jquery/jquery</span><br></pre></td></tr></table></figure></li><li><p>安装特定版本库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower install bootstrap<span class="comment">#3.3.7</span></span><br></pre></td></tr></table></figure></li><li><p>卸载安装包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower uninstall jquery</span><br></pre></td></tr></table></figure></li><li><p>搜索</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower search bootstrap</span><br></pre></td></tr></table></figure></li><li><p>查看库信息，包括各版本和依赖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower info bootstrap</span><br></pre></td></tr></table></figure></li><li><p>查看本地库的依赖关系</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower list</span><br></pre></td></tr></table></figure></li><li><p>打开包的官网</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower home bootstrap</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-配置文件-bowerrc"><a href="#5-配置文件-bowerrc" class="headerlink" title="5. 配置文件.bowerrc"></a>5. 配置文件.bowerrc</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"directory"</span>: <span class="string">"bower_components"</span> //包目录，我一般localhost会指到build目录，所以配成build/bower_components</span><br><span class="line">    "json" : "bower.json", //包管理文件</span><br><span class="line">    "endpoint" : "https://Bower.herokuapp.com", //用来搜索库的索引地址</span><br><span class="line">    "searchpath" : "", //备用索引地址，一般是用于非公开库的搜索</span><br><span class="line">    "proxy": "http://proxy.local", //网络代理设置</span><br><span class="line">    "https-proxy": "https://proxy.local",</span><br><span class="line">    "timeout": 60000</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其它参数请看<a href="https://bower.io/docs/config/" target="_blank" rel="noopener">官方文档</a>，或者<a href="https://github.com/bower/spec/blob/master/config.md" target="_blank" rel="noopener">GitHub</a></p><h4 id="6-补充：npm-v3的依赖管理"><a href="#6-补充：npm-v3的依赖管理" class="headerlink" title="6. 补充：npm v3的依赖管理"></a>6. 补充：npm v3的依赖管理</h4><p>上面说的嵌套依赖管理是npm v2的，在v3已经做了优化，在库版本兼容前提下不会再重复下载，详情可看<a href="https://docs.npmjs.com/how-npm-works/npm3" target="_blank" rel="noopener">这里</a> | <a href="http://coloration.cc/npmjs-documentation/2016/03/29/npmV3.html" target="_blank" rel="noopener">中文</a></p><p><img src="/images/2017/08/npm3deps4.png" alt=""></p><h4 id="7-补充：关于语义化版本"><a href="#7-补充：关于语义化版本" class="headerlink" title="7. 补充：关于语义化版本"></a>7. 补充：关于语义化版本</h4><p><a href="http://semver.org/lang/zh-CN/" target="_blank" rel="noopener">http://semver.org/lang/zh-CN/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/2017/08/bower.png&quot; alt=&quot;bower&quot;&gt;&lt;/p&gt;&lt;h4 id=&quot;1-bower是什么&quot;&gt;&lt;a href=&quot;#1-bower是什么&quot; class=&quot;headerlink&quot; title=&quot;1. bower是什么&quot;&gt;&lt;/a&gt;1. bower是什么&lt;/h4&gt;&lt;p&gt;bower是基于node.js的包管理工具，可以方便的安装和卸载web开发资源，诸如jQuery、bootstrap之类&lt;br&gt;而像yeoman和grunt则是在bower基础上的开发工具&lt;/p&gt;&lt;h4 id=&quot;2-bower和npm的区别&quot;&gt;&lt;a href=&quot;#2-bower和npm的区别&quot; class=&quot;headerlink&quot; title=&quot;2. bower和npm的区别&quot;&gt;&lt;/a&gt;2. bower和npm的区别&lt;/h4&gt;&lt;p&gt;都是包管理工具，但是bower是for web，npm的包依赖是一种独特的嵌套依赖关系树，依赖包层层嵌套树杈非常坑长，打开node_modules可以看到里面密密麻麻的包，但对于前端库来说，这些基本是多余的，往往需要的只是一个未压缩或者压缩后的js和css而已，而bower正是管理js/css/模板的一个工具&lt;br&gt;&lt;a href=&quot;https://stackoverflow.com/questions/18641899/what-is-the-difference-between-bower-and-npm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Stack上有相关评论点这里&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="https://21ido.com/categories/Web/"/>
    
    
      <category term="bower" scheme="https://21ido.com/tags/bower/"/>
    
      <category term="nodejs" scheme="https://21ido.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Flex布局学习笔记</title>
    <link href="https://21ido.com/2017/08/d15bd75e/"/>
    <id>https://21ido.com/2017/08/d15bd75e/</id>
    <published>2017-08-18T08:47:05.000Z</published>
    <updated>2018-05-13T14:17:01.335Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">阮大的教程</a> | <a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="noopener">实战篇</a></p><p><a href="https://github.com/Coffcer/flex-layout" target="_blank" rel="noopener">Flex布局的开源库</a></p><p>CSS传统布局基于盒子模型，依靠display + position + float属性进行定位，在一些特殊布局显得不灵活</p><p>Flex布局，容器内的元素自动成为flex item，容器基于XY轴进行布局</p><p>其容器属性有</p><ul><li>flex-direction X主轴排列方向</li><li>flex-wrap 元素换行</li><li>flex-flow 上面2个的简写</li><li>justify-content 主轴对齐方式</li><li>align-items Y轴对齐方式</li><li>align-content 多轴线对齐方式</li></ul><p>item属性有</p><ul><li>order 排列顺序</li><li>flex-grow 剩余空间膨胀值</li><li>flex-shrink 空间不足缩小值</li><li>flex-basis 预分配大小值</li><li>flex 以上3个的简写</li><li>align-self 对齐方式<a id="more"></a></li></ul><p><img src="/images/2017/08/1.png" alt=""><br><!-- more --><br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">html,body&#123;</span></span><br><span class="line"><span class="undefined">width:100%;</span></span><br><span class="line"><span class="undefined">height:100%;</span></span><br><span class="line"><span class="undefined">margin:0;</span></span><br><span class="line"><span class="undefined">padding:0;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">body &#123;</span></span><br><span class="line"><span class="undefined">display: flex;</span></span><br><span class="line"><span class="undefined">justify-content:center;</span></span><br><span class="line"><span class="undefined">align-items:center;</span></span><br><span class="line"><span class="undefined">flex-direction:column;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">body &gt; div&#123;</span></span><br><span class="line"><span class="undefined">background-color: #00A6C7;</span></span><br><span class="line"><span class="undefined">border-radius: 10px;</span></span><br><span class="line"><span class="undefined">margin:10px;</span></span><br><span class="line"><span class="undefined">padding:10px;</span></span><br><span class="line"><span class="undefined">width:500px;</span></span><br><span class="line"><span class="undefined">align-self: center;</span></span><br><span class="line"><span class="undefined">text-align:center;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是内容区1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是内容区2<span class="tag">&lt;<span class="name">br</span>/&gt;</span>换行测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p><img src="/images/2017/08/2.png" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">html,body&#123;</span></span><br><span class="line"><span class="undefined">width:100%;</span></span><br><span class="line"><span class="undefined">height:100%;</span></span><br><span class="line"><span class="undefined">margin:0;</span></span><br><span class="line"><span class="undefined">padding:0;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">body &#123;</span></span><br><span class="line"><span class="undefined">display: flex;</span></span><br><span class="line"><span class="undefined">flex-wrap: wrap;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">body &gt; div&#123;</span></span><br><span class="line"><span class="undefined">order: 2;</span></span><br><span class="line"><span class="undefined">min-width:80%;</span></span><br><span class="line"><span class="undefined">min-height:600px;</span></span><br><span class="line"><span class="undefined">flex-grow:2;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">aside&#123;</span></span><br><span class="line"><span class="undefined">order:1;</span></span><br><span class="line"><span class="undefined">border:1px solid;</span></span><br><span class="line"><span class="undefined">background-color:#00caff;</span></span><br><span class="line"><span class="undefined">width:200px;</span></span><br><span class="line"><span class="undefined">align-items: baseline;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">header&#123;</span></span><br><span class="line"><span class="undefined">border:1px solid;</span></span><br><span class="line"><span class="undefined">background-color:#EEE;</span></span><br><span class="line"><span class="undefined">width:100%;</span></span><br><span class="line"><span class="undefined">height:80px;</span></span><br><span class="line"><span class="undefined">order:0;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">footer&#123;</span></span><br><span class="line"><span class="undefined">order:99;</span></span><br><span class="line"><span class="undefined">align-self: flex-end;</span></span><br><span class="line"><span class="undefined">border:1px solid;</span></span><br><span class="line"><span class="undefined">background-color:#000;</span></span><br><span class="line"><span class="undefined">color:#FFF;</span></span><br><span class="line"><span class="undefined">height:50px;</span></span><br><span class="line"><span class="undefined">width:100%;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是内容区<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span>这是菜单<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>这是头部<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>这是尾部<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/2017/08/3.png" alt=""><br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">html,body&#123;</span></span><br><span class="line"><span class="undefined">width:100%;</span></span><br><span class="line"><span class="undefined">height:100%;</span></span><br><span class="line"><span class="undefined">margin:0;</span></span><br><span class="line"><span class="undefined">padding:0;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">body &#123;</span></span><br><span class="line"><span class="undefined">background-color: #f2f2f2;</span></span><br><span class="line"><span class="undefined">display: flex;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">body &gt; div&#123;</span></span><br><span class="line"><span class="undefined">background-color: #00A6C7;</span></span><br><span class="line"><span class="undefined">border-radius: 10px;</span></span><br><span class="line"><span class="undefined">margin:10px;</span></span><br><span class="line"><span class="undefined">padding:10px;</span></span><br><span class="line"><span class="undefined">width:50%;</span></span><br><span class="line"><span class="undefined">height:50%;</span></span><br><span class="line"><span class="undefined">text-align:center;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">div:nth-child(1)&#123;</span></span><br><span class="line"><span class="undefined">align-self: flex-start;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">div:nth-child(2)&#123;</span></span><br><span class="line"><span class="undefined">align-self:center;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">div:nth-child(3)&#123;</span></span><br><span class="line"><span class="undefined">align-self:flex-end;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">div:nth-child(4)&#123;</span></span><br><span class="line"><span class="undefined">height:100%;</span></span><br><span class="line"><span class="undefined">margin:0;</span></span><br><span class="line"><span class="undefined">padding:0;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是内容区1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是内容区2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是内容区3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是内容区4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p><img src="/images/2017/08/4.png" alt=""><br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">html,body&#123;</span></span><br><span class="line"><span class="undefined">width:100%;</span></span><br><span class="line"><span class="undefined">height:100%;</span></span><br><span class="line"><span class="undefined">margin:0;</span></span><br><span class="line"><span class="undefined">padding:0;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">body &#123;</span></span><br><span class="line"><span class="undefined">background-color: #f2f2f2;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">div &gt; div&#123;</span></span><br><span class="line"><span class="undefined">background-color: #00A6C7;</span></span><br><span class="line"><span class="undefined">border-radius: 10px;</span></span><br><span class="line"><span class="undefined">margin:10px;</span></span><br><span class="line"><span class="undefined">padding:20px 10px;</span></span><br><span class="line"><span class="undefined">text-align: center;</span></span><br><span class="line"><span class="undefined">flex-grow:1;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">body &gt; div &#123;</span></span><br><span class="line"><span class="undefined">display: flex;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1/5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1/5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1/5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1/5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1/5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1/7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1/7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1/7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1/7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1/7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1/7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1/7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1/8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1/8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1/8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1/8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1/8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1/8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1/8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1/8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1/9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1/9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1/9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1/9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1/9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1/9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1/9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1/9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1/9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阮大的教程&lt;/a&gt; | &lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/07/flex-examples.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;实战篇&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Coffcer/flex-layout&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Flex布局的开源库&lt;/a&gt;&lt;/p&gt;&lt;p&gt;CSS传统布局基于盒子模型，依靠display + position + float属性进行定位，在一些特殊布局显得不灵活&lt;/p&gt;&lt;p&gt;Flex布局，容器内的元素自动成为flex item，容器基于XY轴进行布局&lt;/p&gt;&lt;p&gt;其容器属性有&lt;/p&gt;&lt;ul&gt;&lt;li&gt;flex-direction X主轴排列方向&lt;/li&gt;&lt;li&gt;flex-wrap 元素换行&lt;/li&gt;&lt;li&gt;flex-flow 上面2个的简写&lt;/li&gt;&lt;li&gt;justify-content 主轴对齐方式&lt;/li&gt;&lt;li&gt;align-items Y轴对齐方式&lt;/li&gt;&lt;li&gt;align-content 多轴线对齐方式&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;item属性有&lt;/p&gt;&lt;ul&gt;&lt;li&gt;order 排列顺序&lt;/li&gt;&lt;li&gt;flex-grow 剩余空间膨胀值&lt;/li&gt;&lt;li&gt;flex-shrink 空间不足缩小值&lt;/li&gt;&lt;li&gt;flex-basis 预分配大小值&lt;/li&gt;&lt;li&gt;flex 以上3个的简写&lt;/li&gt;&lt;li&gt;align-self 对齐方式
    
    </summary>
    
      <category term="Web" scheme="https://21ido.com/categories/Web/"/>
    
    
      <category term="css" scheme="https://21ido.com/tags/css/"/>
    
      <category term="html" scheme="https://21ido.com/tags/html/"/>
    
      <category term="flex" scheme="https://21ido.com/tags/flex/"/>
    
  </entry>
  
  <entry>
    <title>ES6箭头函数</title>
    <link href="https://21ido.com/2017/06/5b0ab7b9/"/>
    <id>https://21ido.com/2017/06/5b0ab7b9/</id>
    <published>2017-06-09T16:31:48.000Z</published>
    <updated>2018-05-17T02:50:04.504Z</updated>
    
    <content type="html"><![CDATA[<p>第一次见到这箭头=&gt;，我觉得这是很奇葩的写法，因为作为一个老男人来说，会影响阅读和理解代码的速度=_=||</p><p>作为ES6新特性之一，箭头函数特点如下</p><p>a）简洁<br>b）this指向<br>c）rest取代arguments</p><h4 id="1-简洁"><a href="#1-简洁" class="headerlink" title="1. 简洁"></a>1. 简洁</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> showTips = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#Tip"</span>).text(d).show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码换成箭头写法是这样<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> showTips = <span class="function">(<span class="params">d</span>) =&gt;</span> &#123;$(<span class="string">"#Tip"</span>).text(d).show()&#125;;</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><p>因为只有一个参数 d 所以括号可以省去，因为function只有一句所以花括号也可以省去，如下<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> showTips = <span class="function"><span class="params">d</span> =&gt;</span> $(<span class="string">"#Tip"</span>).text(d).show();</span><br></pre></td></tr></table></figure><p></p><p>但是这2个function并不完全相同，去掉花括号后，其实等价于<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> showTips = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $(<span class="string">"#Tip"</span>).text(d).show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>也就是带花括号的是原汁原味的code，而省了花括号后会自动加上return，比如做价格运算时<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTotalPrice</span>(<span class="params">price, count</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> price * count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>用箭头函数写法就是<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getTotalPrice = <span class="function">(<span class="params">price,count</span>) =&gt;</span> price * count;</span><br></pre></td></tr></table></figure><p></p><p>确实相当简洁</p><h4 id="2-this指向"><a href="#2-this指向" class="headerlink" title="2. this指向"></a>2. this指向</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dom = $(<span class="string">"#Tip"</span>);</span><br><span class="line">    <span class="keyword">this</span>.dom.text(s).show();</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dom.hide();</span><br><span class="line">    &#125;,<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码看起来没大问题，甚至直接执行Test()也没问题，不报错，2秒后dom也会自动隐藏，但是这里面的this指向了window，也就是本来应该局部变量却提升到全局变量，造成污染了<br>所以一般采用闭包或是实例化，例如<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t = <span class="keyword">new</span> Test(<span class="string">"Hi Function"</span>);</span><br></pre></td></tr></table></figure><p></p><p>此时function里的this指向对象 t 本身，但是setTimeout里面的this却指向window，会导致2秒后找不到dom对象<br>正常做法是setTimeout前var一个变量来保存this<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dom = $(<span class="string">"#Tip"</span>);</span><br><span class="line">    <span class="keyword">this</span>.dom.text(s).show();</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        self.dom.hide();</span><br><span class="line">    &#125;,<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> t = <span class="keyword">new</span> Test(<span class="string">"Hi Function"</span>);</span><br></pre></td></tr></table></figure><p></p><p>这是比较常见但也比较丑陋的写法，还有一种是这样<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dom = $(<span class="string">"#Tip"</span>);</span><br><span class="line">    <span class="keyword">this</span>.dom.text(s).show();</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dom.hide();</span><br><span class="line">    &#125;.bind(<span class="keyword">this</span>),<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> t = <span class="keyword">new</span> Test(<span class="string">"Hi Function"</span>);</span><br></pre></td></tr></table></figure><p></p><p>把外面的this强行绑定到里面去，这样里面调用this则会变成调外面<br>到了ES6箭头函数，this并不会指向函数本身，而且往上层查找this，包括arguments<br>所以用箭头函数可以这样写<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dom = $(<span class="string">"#Tip"</span>);</span><br><span class="line">    <span class="keyword">this</span>.dom.text(s).show();</span><br><span class="line">    setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.dom.hide();</span><br><span class="line">    &#125;,<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> t = <span class="keyword">new</span> Test(<span class="string">"Hi Function"</span>);</span><br></pre></td></tr></table></figure><p></p><h4 id="3-argumengts"><a href="#3-argumengts" class="headerlink" title="3. argumengts"></a>3. argumengts</h4><p>如上面说的，箭头函数里arguments会往上层查找arguments，所以下面这个最后输出Hi，而不是Hello<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">    &#125;)(<span class="string">"Hello"</span>);</span><br><span class="line">&#125;</span><br><span class="line">Test(<span class="string">"Hi"</span>);</span><br></pre></td></tr></table></figure><p></p><p>再修改一下多套一层箭头函数<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">        &#125;)(<span class="string">"Hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Test(<span class="string">"Hi"</span>)();</span><br></pre></td></tr></table></figure><p></p><p>一样打印Hi，因为会顺着作用域链往上查找，套了2个return看着有点乱，换个写法<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">    setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">    &#125;,<span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line">Test(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>); <span class="comment">// -&gt; [4,5,6]</span></span><br></pre></td></tr></table></figure><p></p><p>如果想用arguments怎么办，可以用ES6新特征rest<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">...r</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(r)</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line">Test(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)(<span class="number">7</span>,<span class="number">8</span>); <span class="comment">// -&gt; [7,8]</span></span><br></pre></td></tr></table></figure><p></p><p>所以有个面试经常用到的题目，写个计时器每一秒打印个数字，并递增1，就可以不用闭包写法了<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i =<span class="number">0</span>;</span><br><span class="line">setInterval( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">10</span>) <span class="built_in">console</span>.log(i++);</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次见到这箭头=&amp;gt;，我觉得这是很奇葩的写法，因为作为一个老男人来说，会影响阅读和理解代码的速度=_=||&lt;/p&gt;&lt;p&gt;作为ES6新特性之一，箭头函数特点如下&lt;/p&gt;&lt;p&gt;a）简洁&lt;br&gt;b）this指向&lt;br&gt;c）rest取代arguments&lt;/p&gt;&lt;h4 id=&quot;1-简洁&quot;&gt;&lt;a href=&quot;#1-简洁&quot; class=&quot;headerlink&quot; title=&quot;1. 简洁&quot;&gt;&lt;/a&gt;1. 简洁&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; showTips = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;d&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $(&lt;span class=&quot;string&quot;&gt;&quot;#Tip&quot;&lt;/span&gt;).text(d).show();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这段代码换成箭头写法是这样&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; showTips = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;d&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;$(&lt;span class=&quot;string&quot;&gt;&quot;#Tip&quot;&lt;/span&gt;).text(d).show()&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="https://21ido.com/categories/Web/"/>
    
    
      <category term="javascript" scheme="https://21ido.com/tags/javascript/"/>
    
      <category term="ES6" scheme="https://21ido.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>grunt入门笔记（1）</title>
    <link href="https://21ido.com/2017/05/b722d741/"/>
    <id>https://21ido.com/2017/05/b722d741/</id>
    <published>2017-05-14T16:14:47.000Z</published>
    <updated>2018-05-22T07:46:01.057Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2017/05/gruntjs.jpg" alt="grunt.js"></p><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h4><p>grunt依赖node.js，需要先安装node.js，官网<a href="https://nodejs.org/" target="_blank" rel="noopener">https://nodejs.org/</a><br>安装后敲node -v会打印版本号，则安装成功<br>接着安装grunt， -g表示全局，不带则安装到当前目录<br>npm install -g grunt-cli</p><h4 id="2-初始化package-json"><a href="#2-初始化package-json" class="headerlink" title="2. 初始化package.json"></a>2. 初始化package.json</h4><p>package.json是node.js项目描述文件，在项目根目录下执行<br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><p>根据提示输入即可，生成文件大概是这样子的<br></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"grunt-test"</span>,</span><br><span class="line"><span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line"><span class="attr">"description"</span>: <span class="string">"only for grunt test"</span>,</span><br><span class="line"><span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line"><span class="attr">"scripts"</span>: &#123;</span><br><span class="line"><span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"repository"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line"><span class="attr">"url"</span>: <span class="string">"git+https://github.com/think2cat/AdminLTE.git"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"keywords"</span>: [</span><br><span class="line"><span class="string">"grunt"</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="attr">"license"</span>: <span class="string">"MIT"</span>,</span><br><span class="line"><span class="attr">"bugs"</span>: &#123;</span><br><span class="line"><span class="attr">"url"</span>: <span class="string">"https://github.com/think2cat/AdminLTE/issues"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"homepage"</span>: <span class="string">"https://github.com/think2cat/AdminLTE#readme"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="3-安装grunt和常用插件"><a href="#3-安装grunt和常用插件" class="headerlink" title="3. 安装grunt和常用插件"></a>3. 安装grunt和常用插件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install grunt --save-dev</span><br></pre></td></tr></table></figure><p>安装后package.json多出一个字段<br></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"devDependencies": &#123;</span><br><span class="line">    "grunt": "^1.0.1"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这里devDependencies表示开发环境所依赖的库，如果是发布后需要的库则用 –save，对应package.json中的dependencies属性，如果只是安装库而不改动package.json则无须加参数<br>grunt常用插件</p><ul><li>合并文件：<a href="https://github.com/gruntjs/grunt-contrib-concat" target="_blank" rel="noopener">grunt-contrib-concat</a></li><li>语法检查：<a href="https://github.com/gruntjs/grunt-contrib-jshint" target="_blank" rel="noopener">grunt-contrib-jshint</a></li><li>CSS压缩： <a href="https://github.com/gruntjs/grunt-contrib-cssmin" target="_blank" rel="noopener">grunt-contrib-cssmin</a></li><li>Scss 编译：<a href="https://github.com/gruntjs/grunt-contrib-sass" target="_blank" rel="noopener">grunt-contrib-sass</a></li><li>压缩文件：<a href="https://github.com/gruntjs/grunt-contrib-uglify" target="_blank" rel="noopener">grunt-contrib-uglify</a></li><li>监听文件变动：<a href="https://github.com/gruntjs/grunt-contrib-watch" target="_blank" rel="noopener">grunt-contrib-watch</a></li><li>建立本地服务器：<a href="https://github.com/gruntjs/grunt-contrib-connect" target="_blank" rel="noopener">grunt-contrib-connect</a></li></ul><h4 id="4-配置grunt"><a href="#4-配置grunt" class="headerlink" title="4. 配置grunt"></a>4. 配置grunt</h4><p>grunt为js文件，遵循node.js模块语法<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//grunt code</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>grunt代码分为3部分，1）config配置，2）task任务，3）插件加载<br>config和task是卸载initConfig函数内，如下<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">grunt.initConfig(&#123;</span><br><span class="line">    pkg: grunt.file.readJSON(<span class="string">'package.json'</span>),</span><br><span class="line">    build: &#123;</span><br><span class="line">        src: <span class="string">'src/&lt;%= pkg.name %&gt;.js'</span>,</span><br><span class="line">        dest: <span class="string">'build/&lt;%= pkg.name %&gt;.min.js'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><p>pkg从package.json读取配置，后面可以直接使用&lt;%= pkg.name %&gt;.来引用常量<br>还有另一种常见配置<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">name: <span class="string">"test"</span>,</span><br><span class="line">author: <span class="string">"Gavin"</span></span><br><span class="line">&#125;;</span><br><span class="line">grunt.initConfig(&#123;</span><br><span class="line">pkg: config,</span><br><span class="line">build: &#123;</span><br><span class="line">src: <span class="string">'src/&lt;%= pkg.name %&gt;.js'</span>,</span><br><span class="line">dest: <span class="string">'build/&lt;%= pkg.name %&gt;.min.js'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><h4 id="5-配置task"><a href="#5-配置task" class="headerlink" title="5. 配置task"></a>5. 配置task</h4><p>grunt只是一个框架，实际干活的是众多插件，在安装完插件后，会在 node_modules 目录下生成对应插件目录，使用时在grunt.js里加载插件并编写相应task<br>比如常见的grunt-contrib-uglify<br>通过这样载入<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grunt.loadNpmTasks(<span class="string">'grunt-contrib-uglify'</span>);</span><br></pre></td></tr></table></figure><p></p><p>并对应到grunt.initConfig的 uglift 任务，如下<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">uglify: &#123;</span><br><span class="line">options: &#123;</span><br><span class="line">mangle: <span class="literal">true</span>,</span><br><span class="line">preserveComments: <span class="string">'some'</span></span><br><span class="line">&#125;,</span><br><span class="line">my_target: &#123;</span><br><span class="line">files: &#123;</span><br><span class="line"><span class="string">'dist/js/app.min.js'</span>: [<span class="string">'dist/js/app.js'</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p></p><p>任务的名称uglify是跟插件名称对应的，不可改，完成上面配置后，再注册默认任务<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'uglify'</span>]);</span><br></pre></td></tr></table></figure><p></p><p>此时执行grunt则会默认执行uglify任务，如果有多个任务，可以依次添加<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grunt.registerTask(<span class="string">'lint'</span>, [<span class="string">'jshint'</span>, <span class="string">'csslint'</span>, <span class="string">'bootlint'</span>]);</span><br></pre></td></tr></table></figure><p></p><p>执行时用命令<br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grunt lint</span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/2017/05/gruntjs.jpg&quot; alt=&quot;grunt.js&quot;&gt;&lt;/p&gt;&lt;h4 id=&quot;1-安装&quot;&gt;&lt;a href=&quot;#1-安装&quot; class=&quot;headerlink&quot; title=&quot;1. 安装&quot;&gt;&lt;/a&gt;1. 安装&lt;/h4&gt;&lt;p&gt;grunt依赖node.js，需要先安装node.js，官网&lt;a href=&quot;https://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://nodejs.org/&lt;/a&gt;&lt;br&gt;安装后敲node -v会打印版本号，则安装成功&lt;br&gt;接着安装grunt， -g表示全局，不带则安装到当前目录&lt;br&gt;npm install -g grunt-cli&lt;/p&gt;&lt;h4 id=&quot;2-初始化package-json&quot;&gt;&lt;a href=&quot;#2-初始化package-json&quot; class=&quot;headerlink&quot; title=&quot;2. 初始化package.json&quot;&gt;&lt;/a&gt;2. 初始化package.json&lt;/h4&gt;&lt;p&gt;package.json是node.js项目描述文件，在项目根目录下执行&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="https://21ido.com/categories/Web/"/>
    
    
      <category term="nodejs" scheme="https://21ido.com/tags/nodejs/"/>
    
      <category term="javascript" scheme="https://21ido.com/tags/javascript/"/>
    
      <category term="grunt" scheme="https://21ido.com/tags/grunt/"/>
    
  </entry>
  
  <entry>
    <title>yeoman入门笔记</title>
    <link href="https://21ido.com/2017/04/b3a22ac5/"/>
    <id>https://21ido.com/2017/04/b3a22ac5/</id>
    <published>2017-04-19T08:23:26.000Z</published>
    <updated>2018-05-22T07:46:09.949Z</updated>
    
    <content type="html"><![CDATA[<p>yeoman官网 <a href="http://yeoman.io/" target="_blank" rel="noopener">http://yeoman.io/</a></p><p>yeoman是一个脚手架工具，用来初始化项目目录结构，便于部署项目<br>早期的web项目基本目录接口大概是这样子</p><p><img src="/images/2017/04/yeoman_1.png" alt=""></p><p>随着web技术发展，各种前端框架的广泛应用，现在的目录结构大概是这样子</p><p><img src="/images/2017/04/yeoman_2.png" alt=""></p><p>根据不同框架、不同编译环境、不同测试环境，以及发布部署，结构更是千变万化，而这些都是比较耗时间去考虑的，现在有了yeoman，可以自动化生成这些结构，只需选好模板，一条命令几个回车即可搞定<br><a id="more"></a><br>首先要安装node.js，然后再安装yeoman<br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yo</span><br></pre></td></tr></table></figure><p></p><p>然后执行<br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yo</span><br></pre></td></tr></table></figure><p></p><p><img src="/images/2017/04/yeoman_3.png" alt="yeoman"></p><p>使用默认自带的模板进行初始化，也可以在官网找其它模板来初始化<br>官网目前有6000+模板可使用，安装可用yo的向导式菜单进行安装，也可直接命令行安装，比如<br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global generator-jquery</span><br></pre></td></tr></table></figure><p></p><p>然后初始化<br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yo jquery</span><br></pre></td></tr></table></figure><p></p><p>目录结构到依赖的库什么的一次搞定，那酸爽！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;yeoman官网 &lt;a href=&quot;http://yeoman.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://yeoman.io/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;yeoman是一个脚手架工具，用来初始化项目目录结构，便于部署项目&lt;br&gt;早期的web项目基本目录接口大概是这样子&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/images/2017/04/yeoman_1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;随着web技术发展，各种前端框架的广泛应用，现在的目录结构大概是这样子&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/images/2017/04/yeoman_2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;根据不同框架、不同编译环境、不同测试环境，以及发布部署，结构更是千变万化，而这些都是比较耗时间去考虑的，现在有了yeoman，可以自动化生成这些结构，只需选好模板，一条命令几个回车即可搞定&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="https://21ido.com/categories/Web/"/>
    
    
      <category term="yeoman" scheme="https://21ido.com/tags/yeoman/"/>
    
  </entry>
  
  <entry>
    <title>群晖NAS上的SVN和GIT服务</title>
    <link href="https://21ido.com/2017/04/9f28229e/"/>
    <id>https://21ido.com/2017/04/9f28229e/</id>
    <published>2017-04-15T15:51:54.000Z</published>
    <updated>2018-05-22T07:46:20.635Z</updated>
    
    <content type="html"><![CDATA[<p>下午终于把SVN搬到NAS上，然后又把SVN迁移到GIT<br>群晖的套件有SVN和GIT，直接安装即可<br>SVN安装完后，磁盘会多出svn文件夹，如果有完整的版本库，直接拷进去然后在群晖管理页面的SVN套件刷新就可以看到，登录用户名什么都照原来的，根本不用设置<br>如果需要新建版本库，则在SVN套件点新建即可</p><p>群晖的GIT套件安装完后，建议新建一个git用户专门来管理GIT目录，然后在GIT套件设置该用户的权限即可<br>GIT不像SVN可以直接在面板新建库，需要打开SSH然后登录，登录账户必须是administrator群组里的账户，登录后新建目录，然后执行git初始化<br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init --bare</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><p>接着本地再进行clone<br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> ssh://git@192.168.1.2/volume1/git/<span class="built_in">test</span></span><br></pre></td></tr></table></figure><p></p><p>因为是空库，可能会提示错误什么，不用管，反正搞完push上去就OK</p><p>如果跟我一样是从svn迁移过来的，git有个svn命令<br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git svn svn://192.168.1.2/<span class="built_in">test</span>/</span><br></pre></td></tr></table></figure><p></p><p>可以做整库迁移，保留commit信息<br>迁移后的git库再push到remote即可</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下午终于把SVN搬到NAS上，然后又把SVN迁移到GIT&lt;br&gt;群晖的套件有SVN和GIT，直接安装即可&lt;br&gt;SVN安装完后，磁盘会多出svn文件夹，如果有完整的版本库，直接拷进去然后在群晖管理页面的SVN套件刷新就可以看到，登录用户名什么都照原来的，根本不用设置&lt;br&gt;如果需要新建版本库，则在SVN套件点新建即可&lt;/p&gt;&lt;p&gt;群晖的GIT套件安装完后，建议新建一个git用户专门来管理GIT目录，然后在GIT套件设置该用户的权限即可&lt;br&gt;GIT不像SVN可以直接在面板新建库，需要打开SSH然后登录，登录账户必须是administrator群组里的账户，登录后新建目录，然后执行git初始化&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git init --bare&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="https://21ido.com/categories/Web/"/>
    
    
      <category term="svn" scheme="https://21ido.com/tags/svn/"/>
    
      <category term="GIT" scheme="https://21ido.com/tags/GIT/"/>
    
  </entry>
  
  <entry>
    <title>Javascript数组的every、some、map、filter、forEach</title>
    <link href="https://21ido.com/2017/03/10afd6ef/"/>
    <id>https://21ido.com/2017/03/10afd6ef/</id>
    <published>2017-03-10T08:02:32.000Z</published>
    <updated>2018-05-13T14:14:10.882Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong>every</strong>，判断是否所有元素都符合，需要每个都为true才返回true，否则返回false</li><li><strong>some</strong>，判断是否有元素符合，一旦遇到true则停止</li><li><strong>map</strong>，每个元素按function返回结果构成新数组</li><li><strong>filter</strong>，返回所有符合条件的元素构成的新数组</li><li><strong>forEach</strong>，单独执行每个元素，无返回</li></ul><p>各函数执行时需要传入function作为参数，每次执行会传入value和index<br><a id="more"></a><br>看个例子就明白了<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span>(<span class="params">v, i</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(v,i);</span><br><span class="line"><span class="keyword">return</span> v %<span class="number">2</span> ==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line">arr.every(fun);</span><br><span class="line"><span class="comment">//--&gt;0 0</span></span><br><span class="line"><span class="comment">//--&gt;0 1</span></span><br><span class="line"><span class="comment">//--&gt;2 2</span></span><br><span class="line"><span class="comment">//--&gt;2 3</span></span><br><span class="line"><span class="comment">//--&gt;1 4</span></span><br><span class="line"><span class="comment">//--&gt;false</span></span><br><span class="line"><span class="comment">//every一旦遇到false则中止，并返回false</span></span><br><span class="line"></span><br><span class="line">arr.some(fun)</span><br><span class="line"><span class="comment">//--&gt;0 0</span></span><br><span class="line"><span class="comment">//--&gt;true</span></span><br><span class="line"><span class="comment">//some一旦遇到true则中止，并返回true</span></span><br><span class="line"></span><br><span class="line">arr.map(fun)</span><br><span class="line"><span class="comment">//--&gt;0 0</span></span><br><span class="line"><span class="comment">//--&gt;0 1</span></span><br><span class="line"><span class="comment">//--&gt;2 2</span></span><br><span class="line"><span class="comment">//--&gt;2 3</span></span><br><span class="line"><span class="comment">//--&gt;1 4</span></span><br><span class="line"><span class="comment">//--&gt;2 5</span></span><br><span class="line"><span class="comment">//--&gt;3 6</span></span><br><span class="line"><span class="comment">//--&gt;4 7</span></span><br><span class="line"><span class="comment">//--&gt;5 8</span></span><br><span class="line"><span class="comment">//--&gt;6 9</span></span><br><span class="line"><span class="comment">//--&gt;7 10</span></span><br><span class="line"><span class="comment">//--&gt;8 11</span></span><br><span class="line"><span class="comment">//--&gt;[true, true, true, true, false, true, false, true, false, true, false, true]</span></span><br><span class="line"><span class="comment">//map会执行每个元素并把function返回的结果组成新数组，不改变原数组</span></span><br><span class="line"></span><br><span class="line">arr.filter(fun)</span><br><span class="line"><span class="comment">//--&gt;0 0</span></span><br><span class="line"><span class="comment">//--&gt;0 1</span></span><br><span class="line"><span class="comment">//--&gt;2 2</span></span><br><span class="line"><span class="comment">//--&gt;2 3</span></span><br><span class="line"><span class="comment">//--&gt;1 4</span></span><br><span class="line"><span class="comment">//--&gt;2 5</span></span><br><span class="line"><span class="comment">//--&gt;3 6</span></span><br><span class="line"><span class="comment">//--&gt;4 7</span></span><br><span class="line"><span class="comment">//--&gt;5 8</span></span><br><span class="line"><span class="comment">//--&gt;6 9</span></span><br><span class="line"><span class="comment">//--&gt;7 10</span></span><br><span class="line"><span class="comment">//--&gt;8 11</span></span><br><span class="line"><span class="comment">//--&gt;[0, 0, 2, 2, 2, 4, 6, 8]</span></span><br><span class="line"><span class="comment">//filter跟map不同的是新数组不是返回值，而是返回true的元素</span></span><br><span class="line"></span><br><span class="line">arr.forEach(fun)</span><br><span class="line"><span class="comment">//--&gt;0 0</span></span><br><span class="line"><span class="comment">//--&gt;0 1</span></span><br><span class="line"><span class="comment">//--&gt;2 2</span></span><br><span class="line"><span class="comment">//--&gt;2 3</span></span><br><span class="line"><span class="comment">//--&gt;1 4</span></span><br><span class="line"><span class="comment">//--&gt;2 5</span></span><br><span class="line"><span class="comment">//--&gt;3 6</span></span><br><span class="line"><span class="comment">//--&gt;4 7</span></span><br><span class="line"><span class="comment">//--&gt;5 8</span></span><br><span class="line"><span class="comment">//--&gt;6 9</span></span><br><span class="line"><span class="comment">//--&gt;7 10</span></span><br><span class="line"><span class="comment">//--&gt;8 11</span></span><br><span class="line"><span class="comment">//--&gt;undefined</span></span><br><span class="line"><span class="comment">//forEach不改变原数组，也无返回值，只是把数组依个执行了一下</span></span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;&lt;li&gt;&lt;strong&gt;every&lt;/strong&gt;，判断是否所有元素都符合，需要每个都为true才返回true，否则返回false&lt;/li&gt;&lt;li&gt;&lt;strong&gt;some&lt;/strong&gt;，判断是否有元素符合，一旦遇到true则停止&lt;/li&gt;&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;，每个元素按function返回结果构成新数组&lt;/li&gt;&lt;li&gt;&lt;strong&gt;filter&lt;/strong&gt;，返回所有符合条件的元素构成的新数组&lt;/li&gt;&lt;li&gt;&lt;strong&gt;forEach&lt;/strong&gt;，单独执行每个元素，无返回&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;各函数执行时需要传入function作为参数，每次执行会传入value和index&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="https://21ido.com/categories/Web/"/>
    
    
      <category term="javascript" scheme="https://21ido.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript6笔记（1）</title>
    <link href="https://21ido.com/2017/03/1768cee0/"/>
    <id>https://21ido.com/2017/03/1768cee0/</id>
    <published>2017-03-05T16:54:57.000Z</published>
    <updated>2018-05-17T02:50:14.591Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">阮老师的《ECMAScript6入门》</a></p><h4 id="let"><a href="#let" class="headerlink" title="let"></a>let</h4><p>声明块级作用域变量<br>let用在花括号{ }里面<br>在用let声明之前，变量不可用，会报错，而var声明之前的变量则返回undefined</p><h4 id="class"><a href="#class" class="headerlink" title="class"></a>class</h4><p>更接近传统OOP的写法<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">"cat"</span>;</span><br><span class="line">        <span class="keyword">this</span>.color = <span class="string">"black"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YellowCat</span> <span class="keyword">extends</span> <span class="title">Cat</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.color = <span class="string">'yellow'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><h4 id="箭头函数-gt"><a href="#箭头函数-gt" class="headerlink" title="箭头函数 =&gt;"></a>箭头函数 =&gt;</h4><p>i =&gt; i+1;<br>等于ES5的 function(i){return i+1}<br>简洁的无法接受！跟ES5不同的是function中的this指向定义function时的对象，而不是运行时的所在对象<br>比如ES5经常用的<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    self.hello(str);</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p></p><p>到了ES6就没必要定义self，而是<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setTimeout( <span class="function">(<span class="params">str</span>) =&gt;</span> <span class="keyword">this</span>.hello(str) , <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p></p><h4 id="destructuring"><a href="#destructuring" class="headerlink" title="destructuring"></a>destructuring</h4><p>这是我见过最无聊的写法<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>, b = <span class="number">456</span>;</span><br><span class="line"><span class="keyword">var</span> c = &#123;a,b&#125;;</span><br><span class="line"><span class="comment">//c = &#123;a:123, b:456&#125;</span></span><br></pre></td></tr></table></figure><p></p><p>还可以倒过来赋值<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = &#123;<span class="attr">a</span>:<span class="string">"cat"</span>, <span class="attr">b</span>:<span class="string">"monkey"</span>&#125;</span><br><span class="line"><span class="keyword">var</span> &#123;a, b&#125; = d;</span><br><span class="line"><span class="comment">//a = "cat", b = "monkey"</span></span><br></pre></td></tr></table></figure><p></p><h4 id="default"><a href="#default" class="headerlink" title="default"></a>default</h4><p>设置默认值，比如常见的这个<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    str || str = <span class="string">"hello"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>到了ES6，就可以这么写<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params">str = <span class="string">"hello"</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="rest"><a href="#rest" class="headerlink" title="rest"></a>rest</h4><p>相当于arguments，比如<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">...types</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(types);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="string">"a"</span>,<span class="string">"b"</span>);</span><br><span class="line"><span class="comment">//--&gt; [1, 3, 5, 6, "a", "b"]</span></span><br><span class="line"><span class="comment">//--&gt; [1, 3, 5, 6, "a", "b"]</span></span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://es6.ruanyifeng.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阮老师的《ECMAScript6入门》&lt;/a&gt;&lt;/p&gt;&lt;h4 id=&quot;let&quot;&gt;&lt;a href=&quot;#let&quot; class=&quot;headerlink&quot; title=&quot;let&quot;&gt;&lt;/a&gt;let&lt;/h4&gt;&lt;p&gt;声明块级作用域变量&lt;br&gt;let用在花括号{ }里面&lt;br&gt;在用let声明之前，变量不可用，会报错，而var声明之前的变量则返回undefined&lt;/p&gt;&lt;h4 id=&quot;class&quot;&gt;&lt;a href=&quot;#class&quot; class=&quot;headerlink&quot; title=&quot;class&quot;&gt;&lt;/a&gt;class&lt;/h4&gt;&lt;p&gt;更接近传统OOP的写法&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Cat&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = &lt;span class=&quot;string&quot;&gt;&quot;cat&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.color = &lt;span class=&quot;string&quot;&gt;&quot;black&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;YellowCat&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Cat&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.color = &lt;span class=&quot;string&quot;&gt;&#39;yellow&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="https://21ido.com/categories/Web/"/>
    
    
      <category term="javascript" scheme="https://21ido.com/tags/javascript/"/>
    
      <category term="ES6" scheme="https://21ido.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>带上跑鞋去旅行，我在巴厘岛跑了半马</title>
    <link href="https://21ido.com/2016/01/ebd5f440/"/>
    <id>https://21ido.com/2016/01/ebd5f440/</id>
    <published>2016-01-07T07:42:47.000Z</published>
    <updated>2018-05-11T07:14:16.947Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2015/06/IMG_0343_1.jpg" alt="飞机上拍到的火烧云"><br>(飞机上拍到的火烧云）</p><p>自从当爹之后，睡眠严重不足，脑子不好使，越来越健忘，一直以为巴厘岛之行回程是5月9日下午抵达香港机场，大连国际马拉松也是9日，想着回深圳后还能跑个半马，于是在5月3日报了大连线上马拉松半程组。</p><p>直到出行前一天，也就是5日，才发现是10日回程，不过幸运的是9日是自由活动日，想着还有机会完成，于是乎一场带跑鞋的旅途就开始了！</p><p>虽然只有半程21公里，但还是很怕跑不完，因为已经整整15个月没跑步了，2013年底骑车摔了脚踝，没伤到骨，但是伤了韧带，加上滑膜炎，没办法放弃了13年底的珠海半马，放弃了14年初的香港渣打马拉松，养伤3个月后，走路骑车都无大碍，唯独跑步一落脚就疼，跑步有个说法，半月不跑武功减半，我这15个月，不止武功尽失，简直就是挑断脚筋吖，欣慰的是每天骑车上下班，想着跑10公里走10公里，总能在关门前完成吧（半程马拉松关门时间一般为3小时）<br><a id="more"></a><br><img src="/images/2015/06/IMG_0642-1_1.jpg" alt=""></p><p>巴厘岛之行第二天黄昏，导游安排的烛光晚餐，位于岛西侧一个海滩，离登巴萨机场很近，很细腻的海沙，这里不得不说巴厘岛的气候，气温、湿度、风力对跑步的影响都颇大，我之前最南也才到过三亚，湿热的海风跟夏天拿电吹风吹一样， 巴厘虽然位于赤道，但是一点也不热，即使在阳光下，除了刺眼，皮肤的炙热度并不会比深圳强，加上凉爽的海风，应该晒一天也不会难受吧。巴厘岛也有马拉松比赛，据说是为马来西亚银行的高层准备的赛事，另一方面是希望借此赛事扩大规模和国际影响力，让更多国外选手和媒体能参与进来，促进本土经济，当然受益最大就是旅游业了。</p><p>在海滩玩了一会已是黄昏，没有比基尼没有冲浪者没有艳遇，太无聊了啊，晚餐又未开始，寻思小跑一会增进食欲，于是赤脚沿着海滩小跑，海水浸泡的海沙挺结实，跑起来也比较容易，不会一脚陷下去</p><p><img src="/images/2015/06/1.jpg" alt=""></p><p>跑步轨迹图，一共就跑了3km，550的配速（跑步术语，每公里耗时5分50秒的意思），呼吸各方面都OK，就是太久没跑步姿势有点不习惯，就当作适应当地气候一次试跑吧</p><p><img src="/images/2015/06/IMG_0691-2_1.jpg" alt="海滩上的夕阳"></p><p>（海滩上的夕阳）</p><p>第三天，6点起了早，也不算早，平时在家这时候也会被女儿吵醒。眼看明天就要跑半马了，对路线却一点都不熟悉，导游第一天说这里晚上很危险，不要单独跑出去，第二天又问了能不能早上在酒店周围跑步，回答依然是很危险，额滴神啊，这是恶人岛不成，秉着遇弱则强，遇强则更强的思想，豁出去了！</p><p><img src="/images/2015/12/IMG_20150508_062716_1.jpg" alt=""></p><p><img src="/images/2015/12/IMG_20150508_062955_1.jpg" alt=""></p><p><img src="/images/2015/12/IMG_20150508_064127_1.jpg" alt=""></p><p>（清晨路上所拍，华为手机，画质渣渣）</p><p><img src="/images/2015/06/2.jpg" alt=""></p><p>探路性的跑了4公里，太阳一出来便回酒店，路况良好，但是起伏很大，坡多是个烦人的问题，就像今年3月8日的首届深圳女子马拉松，我几个朋友都是轻轻松松430的水平（4小时30分），结果组委会改了路线，跑到仙湖里面去，仙湖里面的坡估计都知道，加上平时跑山少，然后跑出了530的成绩。</p><p>本来探路是想找一段较为平缓和安全的路，可是如今真的成了奢望，而且没有人行道，照片上那个有人行道的路段，总长200米不到，这要是来回跑个半马，头都要晕了，田径场我很少跑半马以上距离，因为超过50圈就会头晕，一般是跑第三跑道，一圈415米，51圈刚好一个半马，然后就晕乎晕乎回家了。</p><p><img src="/images/2015/06/IMG_0554_1.jpg" alt="无边泳池"></p><p>（无边泳池）</p><p><img src="/images/2016/01/155143gqvooopipx4p6sis.jpg" alt=""></p><p>（16张照片合成的广角，海水变形严重，技术有限，将就看吧o(╯□╰)o）</p><p><img src="/images/2015/06/IMG_0559_1.jpg" alt=""></p><p><img src="/images/2015/06/IMG_0562_1.jpg" alt=""></p><p>第四天，自由活动，跟着蔡总去潜水，晕船吐的不行，恨不得可以Ctrl+ZZZ，悔的肠子都白了，吐的那个凶残啊，joan说我脸惨白惨白，哎丢死人了都，浑身无力啊，还连累了同船的兄弟，So sorry！</p><p><img src="/images/2015/12/IMG_5944_1.jpg" alt=""></p><p>潜完水回到岸上已是下午3点多，吃完午饭回酒店，一票人说要先去逛超市，呃，我的半马恐怕要黄了。说好一小时后上车走人，总有些没时间观念的拖延症患者，这种现象在技术中心大会议上更是深刻具体万丈光芒的发扬光大！<br>回到酒店已是6点，不管三七还是田七了，赶紧换上跑鞋，Go go go！</p><p><img src="/images/2015/06/3.jpg" alt="半马GPS轨迹图"></p><p>（半马GPS轨迹图）</p><p><img src="/images/2015/06/4_1.jpg" alt="配速图"></p><p>配速图就跟见到鬼的心电图一样乱串，状态非常不好，第一个10km跑了73分钟，天已经完全黑了，大部分路都没有路灯，我也没带头灯，身上只有鞋子上有反光标，每次后面有汽车灯照过来，就赶紧靠边避让，跑回酒店喝了水，又跑了出来，一连串的汽车呼啸而过，丝毫没有减速的意思，根本没法过马路，在保安哥红色警示棒帮助下才过了马路，突然意识到如果被车撞了，会不会有人送医院，因为我没带紧急联系卡，所以也不会有人联系我朋友，马拉松赛事都要填写紧急联系卡，包括紧急联系人、血型和过敏药物，一般是在比赛号码纸的背面，可这次没有号码纸，就没有考虑这么多，而且也没想过要夜跑，完蛋了，一时间又饿又渴，几乎想放弃了。</p><p><img src="/images/2015/12/IMG_20150509_195451_1.jpg" alt=""></p><p>16km后渴的受不了，又不想跑回酒店，毕竟需要浪费更多时间，厚着脸皮跑进这家酒店保安亭，跟保安哥讨水喝，用着稀巴烂的英语加地球人通用手势，保安哥很是热情，一边倒水一边问我从哪里跑过来的。连喝2杯冰水后再次跑起，在酒店前面这条不足200米的人行道来回跑，一是距离太短，二是路正好在斜坡上。</p><p>酒店前面的射灯把我影子照到马路对面大树上，夜很静，除了虫叫，只有自己的呼吸声和心跳声，我还活着，不禁想起在天堂的母亲，那个最疼我的人已经走了，我却还需活着，因为我还有家人需要照顾，这也是我长期坚持运动的原因，我需要强壮的体魄来支撑这个家，即使老了也希望能生活自理，不给家人添负担。</p><p>19km后真的跑不动了，太饿太饿了，自从胖到120斤后长跑变得很辛苦，多么怀念一百零几斤的时候，捏捏腰上的肉，都是长期加班换来的，武汉一年加班1000+小时的记录不晓得有人打破没，反正有得必有失，换来奖金，却丢了健康。没办法干脆停下来走，走了一个上坡，又跑了一个下坡，如此循环着，来回3次到了20km，似乎看到终点的，开始往酒店跑去，看到酒店了，200米，100米，50米，到了！拿出手机一看，居然还差400米才够半马，于是继续往前跑去，100米，200米，300米，折返，100米，50米，到了到了，真的跑完了，心情舒畅，无法言喻。</p><p>21.34km，耗时2小时56分钟，成绩很差，但很开心，感谢母亲的陪伴，人活着，除了方向和目标，真的还需要一个信念，它不能给你指引，但能让你前进。</p><p><img src="/images/2015/12/IMG_20150520_230114_1.jpg" alt=""></p><p>2周后收到快递送来的完赛纪念牌，有2枚是因为那天，我家媳妇在深大的田径场也完成了半马。。。</p><p>（全文完，此处应有掌声。。。。 ）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/2015/06/IMG_0343_1.jpg&quot; alt=&quot;飞机上拍到的火烧云&quot;&gt;&lt;br&gt;(飞机上拍到的火烧云）&lt;/p&gt;&lt;p&gt;自从当爹之后，睡眠严重不足，脑子不好使，越来越健忘，一直以为巴厘岛之行回程是5月9日下午抵达香港机场，大连国际马拉松也是9日，想着回深圳后还能跑个半马，于是在5月3日报了大连线上马拉松半程组。&lt;/p&gt;&lt;p&gt;直到出行前一天，也就是5日，才发现是10日回程，不过幸运的是9日是自由活动日，想着还有机会完成，于是乎一场带跑鞋的旅途就开始了！&lt;/p&gt;&lt;p&gt;虽然只有半程21公里，但还是很怕跑不完，因为已经整整15个月没跑步了，2013年底骑车摔了脚踝，没伤到骨，但是伤了韧带，加上滑膜炎，没办法放弃了13年底的珠海半马，放弃了14年初的香港渣打马拉松，养伤3个月后，走路骑车都无大碍，唯独跑步一落脚就疼，跑步有个说法，半月不跑武功减半，我这15个月，不止武功尽失，简直就是挑断脚筋吖，欣慰的是每天骑车上下班，想着跑10公里走10公里，总能在关门前完成吧（半程马拉松关门时间一般为3小时）&lt;br&gt;
    
    </summary>
    
      <category term="Life" scheme="https://21ido.com/categories/Life/"/>
    
    
      <category term="跑步" scheme="https://21ido.com/tags/%E8%B7%91%E6%AD%A5/"/>
    
      <category term="旅行" scheme="https://21ido.com/tags/%E6%97%85%E8%A1%8C/"/>
    
      <category term="马拉松" scheme="https://21ido.com/tags/%E9%A9%AC%E6%8B%89%E6%9D%BE/"/>
    
      <category term="巴厘岛" scheme="https://21ido.com/tags/%E5%B7%B4%E5%8E%98%E5%B2%9B/"/>
    
      <category term="潜水" scheme="https://21ido.com/tags/%E6%BD%9C%E6%B0%B4/"/>
    
  </entry>
  
</feed>
